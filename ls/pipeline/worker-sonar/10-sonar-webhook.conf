filter {
  if ([type] == "sonar-webhook" and "sonar-squad-update" not in [tags] and "sync-mq" not in [tags]) {

    if "" in [message] {
      json {
        source => "message"
        remove_field => [ "message" ]
      }
    }

    if "" not in [taskId] { drop{} }

    mutate {
      replace => {
        "[@metadata][output][document_id]" => "%{taskId}"
        "[@metadata][output][index]"       => "metrics-%{type}-%{+YYYY}"
      }
      remove_field => [ "headers" ]
      rename => { "[project][key]" => "projectkey" }
    }

    esquerystring {
      source => "[projectkey]"
      target => "[@metadata][search][projectkey]"
    }
    if ("" in [@metadata][search][projectkey] and [@metadata][search][projectkey] != "") {
      opensearch {
        id       => "10-sonar-webhook.conf_0_elasticsearch"
        hosts    => ["10.27.0.29:9200"]
        ca_file  => "/usr/share/logstash/misc/ca.crt"
        user     => "{{ opensearch_tech_user }}"
        password => "{{ opensearch_tech_password }}"
        index    => "metrics-mappings-sonar-portfolio"
        query    => "projectkey.keyword:%{[@metadata][search][projectkey]}"
        fields   => {
          "portfoliokey" => "portfoliokey"
        }
        enable_sort => false
        result_size => 1000
      }

      ruby {
        id   => "10-sonar-webhook.conf_1_ruby"
        path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
        script_params => {
          "fields" => [
            "portfoliokey"
          ]
        }
      }
    }

    if "" in [segment] {
      rest {
        id => "sonar_task"
        request => {
          url => "https://sw.v-serv.ru/sonar/api/ce/task?id=%{taskId}"
          headers => {
            "Authorization" => "Basic ZmRiMmU4YWI3MDlhNjRhMDJhMTYyYjEzMGZkYmY1YmE0YjNhMzliNjo="
          }
        }
        json => true
        truststore => "/usr/share/logstash/misc/ca2.jks"
        truststore_password => "password"
        connect_timeout => 60
        request_timeout => 60
        socket_timeout => 60
        automatic_retries => 3
        target => "sonar_task"
        fallback  => {
          "sonar_task_error" => true
        }
      }
    }
    if ("" not in [sonar_task][sonar_task_error]) {
      ruby {
        code => "event.get('sonar_task').each { |key, value| event.set(key, value) }"
        remove_field => ["sonar_task"]
      }
    }

    if "" in [segment] {
      rest {
        id => "sonar_component"
        request => {
          url => "https://sw.v-serv.ru/sonar/api/navigation/component?component=%{projectkey}&branch=%{[branch][name]}"
          headers => {
            "Authorization" => "Basic ZmRiMmU4YWI3MDlhNjRhMDJhMTYyYjEzMGZkYmY1YmE0YjNhMzliNjo="
          }
        }
        json => true
        truststore => "/usr/share/logstash/misc/ca2.jks"
        truststore_password => "password"
        connect_timeout => 60
        request_timeout => 60
        socket_timeout => 60
        automatic_retries => 3
        target => "sonar_component"
        fallback  => {
          "sonar_component_error" => true
        }
      }
    }

    if ("" not in [sonar_component][sonar_component_error]) {
      ruby {
        code => "
          unless event.get('[sonar_component][qualityProfiles]').nil?
            event.get('[sonar_component][qualityProfiles]').each { |profile|
              event.set('[QualityProfiles]['+profile['language']+']', profile['name'])
            }
          end
          event.set('version', event.get('[sonar_component][version]'))
        "
        remove_field => [ "[sonar_component]" ]
      }
    }

    if "" in [segment] {
      rest {
        id => "sonar_measures"
        request => {
          url => "https://sw.v-serv.ru/sonar/api/measures/component?component=%{projectkey}&branch=%{[branch][name]}&metricKeys=accessors,new_technical_debt,afferent_coupling_average,afferent_coupling_total,blocker_violations,new_it_conditions_to_cover,bugs,burned_budget,business_value,class_complexity_distribution,classes,code_smells,cognitive_complexity,comment_lines,cloc,commented_out_code_lines,comment_lines_density,comment_lines_data,class_complexity,file_complexity,function_complexity,complexity_in_classes,complexity_in_functions,branch_coverage,new_it_branch_coverage,new_branch_coverage,conditions_by_line,conditions_to_cover,new_conditions_to_cover,confirmed_issues,clojure-issues-count,coverage,new_it_coverage,coverage_line_hits_data,new_coverage,covered_conditions_by_line,covered_statements,critical_violations,complexity,last_commit_date,directories,duplicated_blocks,new_duplicated_blocks,duplicated_files,duplicated_lines,duplicated_lines_density,new_duplicated_lines,new_duplicated_lines_density,duplications_data,efferent_coupling_average,efferent_coupling_total,effort_to_reach_maintainability_rating_a,clojure-issues-error,pitest_mutations_error,executable_lines_data,false_positive_issues,file_complexity_distribution,clojure-issues-file,files,function_complexity_distribution,functions,generated_lines,generated_ncloc,high_severity_vulns,html-filnumix-link,info_violations,inherited_risk_score,violations,it_conditions_to_cover,it_branch_coverage,it_conditions_by_line,it_coverage,it_coverage_line_hits_data,it_covered_conditions_by_line,it_line_coverage,it_lines_to_cover,it_uncovered_conditions,it_uncovered_lines,pitest_mutations_killed,last_change_on_maintainability_rating,last_change_on_releasability_rating,last_change_on_reliability_rating,last_change_on_security_rating,line_coverage,new_it_line_coverage,new_line_coverage,clojure-issues-line,lines,ncloc,loc,ncloc_language_distribution,lines_to_cover,new_it_lines_to_cover,new_lines_to_cover,leak_projects,lloc,low_severity_vulns,sqale_rating,new_maintainability_rating,major_violations,medium_severity_vulns,minor_violations,moduleComplexity,modules,pitest_mutations_killed_percent,pitest_mutations_data,pitest_mutations_unknown,ncloc_data,new_blocker_violations,new_bugs,new_code_smells,new_critical_violations,new_info_violations,new_violations,new_lines,new_major_violations,new_minor_violations,new_vulnerabilities,pitest_mutations_noCoverage,open_issues,overall_conditions_to_cover,new_overall_conditions_to_cover,overall_branch_coverage,new_overall_branch_coverage,overall_conditions_by_line,overall_coverage,overall_coverage_line_hits_data,new_overall_coverage,overall_covered_conditions_by_line,overall_line_coverage,new_overall_line_coverage,overall_lines_to_cover,new_overall_lines_to_cover,overall_uncovered_conditions,new_overall_uncovered_conditions,overall_uncovered_lines,new_overall_uncovered_lines,report,procedures,project_complexity,projects,public_api,public_documented_api_density,public_undocumented_api,alert_status,releasability_rating,reliability_rating,new_reliability_rating,reliability_remediation_effort,new_reliability_remediation_effort,reopened_issues,security_rating,new_security_rating,security_remediation_effort,new_security_remediation_effort,skipped_tests,sonarjava_feedback,sloc,development_cost,scoverage,statements,pitest_mutations_survived,team_size,sqale_index,sqale_debt_ratio,new_sqale_debt_ratio,total_dependencies,pitest_mutations_total,maintainability_rating_effort,reliability_rating_effort,security_rating_effort,releasability_effort,total_statements,total_vulnerabilities,uncovered_conditions,new_it_uncovered_conditions,new_uncovered_conditions,uncovered_lines,new_it_uncovered_lines,new_uncovered_lines,test_data,test_execution_time,test_errors,test_failures,test_success_density,tests,vulnerabilities,vulnerable_component_ratio,vulnerable_dependencies,wont_fix_issues&additionalFields=periods"
          headers => {
            "Authorization" => "Basic ZmRiMmU4YWI3MDlhNjRhMDJhMTYyYjEzMGZkYmY1YmE0YjNhMzliNjo="
          }
        }
        json => true
        truststore => "/usr/share/logstash/misc/ca2.jks"
        truststore_password => "password"
        connect_timeout => 60
        request_timeout => 60
        socket_timeout => 60
        automatic_retries => 3
        target => "sonar_measures"
        fallback  => {
          "sonar_measures_error" => true
        }
      }
    }

    if ("" not in [sonar_measures][sonar_measures_error]) {
      if "" in [segment] {
        mutate {
          add_field => { "[@metadata][metrics_json]" => '[{"domain": "Size", "type": "INT", "name": "accessors"}, {"domain": "Maintainability", "type": "WORK_DUR", "name": "new_technical_debt"}, {"domain": "Complexity", "type": "FLOAT", "name": "afferent_coupling_average"}, {"domain": "Complexity", "type": "INT", "name": "afferent_coupling_total"}, {"domain": "Issues", "type": "INT", "name": "blocker_violations"}, {"domain": "Coverage", "type": "INT", "name": "new_it_conditions_to_cover"}, {"domain": "Reliability", "type": "INT", "name": "bugs"}, {"domain": "Management", "type": "FLOAT", "name": "burned_budget"}, {"domain": "Management", "type": "FLOAT", "name": "business_value"}, {"domain": "Complexity", "type": "DISTRIB", "name": "class_complexity_distribution"}, {"domain": "Size", "type": "INT", "name": "classes"}, {"domain": "Maintainability", "type": "INT", "name": "code_smells"}, {"domain": "Complexity", "type": "INT", "name": "cognitive_complexity"}, {"domain": "Size", "type": "INT", "name": "comment_lines"}, {"domain": "General", "type": "INT", "name": "cloc"}, {"domain": "Documentation", "type": "INT", "name": "commented_out_code_lines"}, {"domain": "Size", "type": "PERCENT", "name": "comment_lines_density"}, {"domain": "Size", "type": "DATA", "name": "comment_lines_data"}, {"domain": "Complexity", "type": "FLOAT", "name": "class_complexity"}, {"domain": "Complexity", "type": "FLOAT", "name": "file_complexity"}, {"domain": "Complexity", "type": "FLOAT", "name": "function_complexity"}, {"domain": "Complexity", "type": "INT", "name": "complexity_in_classes"}, {"domain": "Complexity", "type": "INT", "name": "complexity_in_functions"}, {"domain": "Coverage", "type": "PERCENT", "name": "branch_coverage"}, {"domain": "Coverage", "type": "PERCENT", "name": "new_it_branch_coverage"}, {"domain": "Coverage", "type": "PERCENT", "name": "new_branch_coverage"}, {"domain": "Coverage", "type": "DATA", "name": "conditions_by_line"}, {"domain": "Coverage", "type": "INT", "name": "conditions_to_cover"}, {"domain": "Coverage", "type": "INT", "name": "new_conditions_to_cover"}, {"domain": "Issues", "type": "INT", "name": "confirmed_issues"}, {"domain": "General", "type": "INT", "name": "clojure-issues-count"}, {"domain": "Coverage", "type": "PERCENT", "name": "coverage"}, {"domain": "Coverage", "type": "PERCENT", "name": "new_it_coverage"}, {"domain": "Coverage", "type": "DATA", "name": "coverage_line_hits_data"}, {"domain": "Coverage", "type": "PERCENT", "name": "new_coverage"}, {"domain": "Coverage", "type": "DATA", "name": "covered_conditions_by_line"}, {"domain": "Size", "type": "INT", "name": "covered_statements"}, {"domain": "Issues", "type": "INT", "name": "critical_violations"}, {"domain": "Complexity", "type": "INT", "name": "complexity"}, {"domain": "SCM", "type": "MILLISEC", "name": "last_commit_date"}, {"domain": "Size", "type": "INT", "name": "directories"}, {"domain": "Duplications", "type": "INT", "name": "duplicated_blocks"}, {"domain": "Duplications", "type": "INT", "name": "new_duplicated_blocks"}, {"domain": "Duplications", "type": "INT", "name": "duplicated_files"}, {"domain": "Duplications", "type": "INT", "name": "duplicated_lines"}, {"domain": "Duplications", "type": "PERCENT", "name": "duplicated_lines_density"}, {"domain": "Duplications", "type": "INT", "name": "new_duplicated_lines"}, {"domain": "Duplications", "type": "PERCENT", "name": "new_duplicated_lines_density"}, {"domain": "Duplications", "type": "DATA", "name": "duplications_data"}, {"domain": "Complexity", "type": "FLOAT", "name": "efferent_coupling_average"}, {"domain": "Complexity", "type": "INT", "name": "efferent_coupling_total"}, {"domain": "Maintainability", "type": "WORK_DUR", "name": "effort_to_reach_maintainability_rating_a"}, {"domain": "General", "type": "DATA", "name": "clojure-issues-error"}, {"domain": "Mutation analysis", "type": "INT", "name": "pitest_mutations_error"}, {"domain": "Coverage", "type": "DATA", "name": "executable_lines_data"}, {"domain": "Issues", "type": "INT", "name": "false_positive_issues"}, {"domain": "Complexity", "type": "DISTRIB", "name": "file_complexity_distribution"}, {"domain": "General", "type": "DATA", "name": "clojure-issues-file"}, {"domain": "Size", "type": "INT", "name": "files"}, {"domain": "Complexity", "type": "DISTRIB", "name": "function_complexity_distribution"}, {"domain": "Size", "type": "INT", "name": "functions"}, {"domain": "Size", "type": "INT", "name": "generated_lines"}, {"domain": "Size", "type": "INT", "name": "generated_ncloc"}, {"domain": "OWASP-Dependency-Check", "type": "INT", "name": "high_severity_vulns"}, {"domain": "General", "type": "DATA", "name": "html-filnumix-link"}, {"domain": "Issues", "type": "INT", "name": "info_violations"}, {"domain": "OWASP-Dependency-Check", "type": "INT", "name": "inherited_risk_score"}, {"domain": "Issues", "type": "INT", "name": "violations"}, {"domain": "Coverage", "type": "INT", "name": "it_conditions_to_cover"}, {"domain": "Coverage", "type": "PERCENT", "name": "it_branch_coverage"}, {"domain": "Coverage", "type": "DATA", "name": "it_conditions_by_line"}, {"domain": "Coverage", "type": "PERCENT", "name": "it_coverage"}, {"domain": "Coverage", "type": "DATA", "name": "it_coverage_line_hits_data"}, {"domain": "Coverage", "type": "DATA", "name": "it_covered_conditions_by_line"}, {"domain": "Coverage", "type": "PERCENT", "name": "it_line_coverage"}, {"domain": "Coverage", "type": "INT", "name": "it_lines_to_cover"}, {"domain": "Coverage", "type": "INT", "name": "it_uncovered_conditions"}, {"domain": "Coverage", "type": "INT", "name": "it_uncovered_lines"}, {"domain": "Mutation analysis", "type": "INT", "name": "pitest_mutations_killed"}, {"domain": "Maintainability", "type": "DATA", "name": "last_change_on_maintainability_rating"}, {"domain": "Releasability", "type": "DATA", "name": "last_change_on_releasability_rating"}, {"domain": "Reliability", "type": "DATA", "name": "last_change_on_reliability_rating"}, {"domain": "Security", "type": "DATA", "name": "last_change_on_security_rating"}, {"domain": "Coverage", "type": "PERCENT", "name": "line_coverage"}, {"domain": "Coverage", "type": "PERCENT", "name": "new_it_line_coverage"}, {"domain": "Coverage", "type": "PERCENT", "name": "new_line_coverage"}, {"domain": "General", "type": "DATA", "name": "clojure-issues-line"}, {"domain": "Size", "type": "INT", "name": "lines"}, {"domain": "Size", "type": "INT", "name": "ncloc"}, {"domain": "General", "type": "INT", "name": "loc"}, {"domain": "Size", "type": "DATA", "name": "ncloc_language_distribution"}, {"domain": "Coverage", "type": "INT", "name": "lines_to_cover"}, {"domain": "Coverage", "type": "INT", "name": "new_it_lines_to_cover"}, {"domain": "Coverage", "type": "INT", "name": "new_lines_to_cover"}, {"domain": "undefined", "type": "DATA", "name": "leak_projects"}, {"domain": "General", "type": "INT", "name": "lloc"}, {"domain": "OWASP-Dependency-Check", "type": "INT", "name": "low_severity_vulns"}, {"domain": "Maintainability", "type": "RATING", "name": "sqale_rating"}, {"domain": "Maintainability", "type": "RATING", "name": "new_maintainability_rating"}, {"domain": "Issues", "type": "INT", "name": "major_violations"}, {"domain": "OWASP-Dependency-Check", "type": "INT", "name": "medium_severity_vulns"}, {"domain": "Issues", "type": "INT", "name": "minor_violations"}, {"domain": "Size", "type": "INT", "name": "moduleComplexity"}, {"domain": "Size", "type": "INT", "name": "modules"}, {"domain": "Mutation analysis", "type": "PERCENT", "name": "pitest_mutations_killed_percent"}, {"domain": "Mutation analysis", "type": "DATA", "name": "pitest_mutations_data"}, {"domain": "Mutation analysis", "type": "INT", "name": "pitest_mutations_unknown"}, {"domain": "Size", "type": "DATA", "name": "ncloc_data"}, {"domain": "Issues", "type": "INT", "name": "new_blocker_violations"}, {"domain": "Reliability", "type": "INT", "name": "new_bugs"}, {"domain": "Maintainability", "type": "INT", "name": "new_code_smells"}, {"domain": "Issues", "type": "INT", "name": "new_critical_violations"}, {"domain": "Issues", "type": "INT", "name": "new_info_violations"}, {"domain": "Issues", "type": "INT", "name": "new_violations"}, {"domain": "Size", "type": "INT", "name": "new_lines"}, {"domain": "Issues", "type": "INT", "name": "new_major_violations"}, {"domain": "Issues", "type": "INT", "name": "new_minor_violations"}, {"domain": "Security", "type": "INT", "name": "new_vulnerabilities"}, {"domain": "Mutation analysis", "type": "INT", "name": "pitest_mutations_noCoverage"}, {"domain": "Issues", "type": "INT", "name": "open_issues"}, {"domain": "Coverage", "type": "INT", "name": "overall_conditions_to_cover"}, {"domain": "Coverage", "type": "INT", "name": "new_overall_conditions_to_cover"}, {"domain": "Coverage", "type": "PERCENT", "name": "overall_branch_coverage"}, {"domain": "Coverage", "type": "PERCENT", "name": "new_overall_branch_coverage"}, {"domain": "Coverage", "type": "DATA", "name": "overall_conditions_by_line"}, {"domain": "Coverage", "type": "PERCENT", "name": "overall_coverage"}, {"domain": "Coverage", "type": "DATA", "name": "overall_coverage_line_hits_data"}, {"domain": "Coverage", "type": "PERCENT", "name": "new_overall_coverage"}, {"domain": "Coverage", "type": "DATA", "name": "overall_covered_conditions_by_line"}, {"domain": "Coverage", "type": "PERCENT", "name": "overall_line_coverage"}, {"domain": "Coverage", "type": "PERCENT", "name": "new_overall_line_coverage"}, {"domain": "Coverage", "type": "INT", "name": "overall_lines_to_cover"}, {"domain": "Coverage", "type": "INT", "name": "new_overall_lines_to_cover"}, {"domain": "Coverage", "type": "INT", "name": "overall_uncovered_conditions"}, {"domain": "Coverage", "type": "INT", "name": "new_overall_uncovered_conditions"}, {"domain": "Coverage", "type": "INT", "name": "overall_uncovered_lines"}, {"domain": "Coverage", "type": "INT", "name": "new_overall_uncovered_lines"}, {"domain": "OWASP-Dependency-Check", "type": "DATA", "name": "report"}, {"domain": "Size", "type": "INT", "name": "procedures"}, {"domain": "General", "type": "INT", "name": "project_complexity"}, {"domain": "Size", "type": "INT", "name": "projects"}, {"domain": "Documentation", "type": "INT", "name": "public_api"}, {"domain": "Documentation", "type": "PERCENT", "name": "public_documented_api_density"}, {"domain": "Documentation", "type": "INT", "name": "public_undocumented_api"}, {"domain": "Releasability", "type": "LEVEL", "name": "alert_status"}, {"domain": "Releasability", "type": "RATING", "name": "releasability_rating"}, {"domain": "Reliability", "type": "RATING", "name": "reliability_rating"}, {"domain": "Reliability", "type": "RATING", "name": "new_reliability_rating"}, {"domain": "Reliability", "type": "WORK_DUR", "name": "reliability_remediation_effort"}, {"domain": "Reliability", "type": "WORK_DUR", "name": "new_reliability_remediation_effort"}, {"domain": "Issues", "type": "INT", "name": "reopened_issues"}, {"domain": "Security", "type": "RATING", "name": "security_rating"}, {"domain": "Security", "type": "RATING", "name": "new_security_rating"}, {"domain": "Security", "type": "WORK_DUR", "name": "security_remediation_effort"}, {"domain": "Security", "type": "WORK_DUR", "name": "new_security_remediation_effort"}, {"domain": "Coverage", "type": "INT", "name": "skipped_tests"}, {"domain": "undefined", "type": "DATA", "name": "sonarjava_feedback"}, {"domain": "General", "type": "INT", "name": "sloc"}, {"domain": "Maintainability", "type": "STRING", "name": "development_cost"}, {"domain": "Tests", "type": "PERCENT", "name": "scoverage"}, {"domain": "Size", "type": "INT", "name": "statements"}, {"domain": "Mutation analysis", "type": "INT", "name": "pitest_mutations_survived"}, {"domain": "Management", "type": "INT", "name": "team_size"}, {"domain": "Maintainability", "type": "WORK_DUR", "name": "sqale_index"}, {"domain": "Maintainability", "type": "PERCENT", "name": "sqale_debt_ratio"}, {"domain": "Maintainability", "type": "PERCENT", "name": "new_sqale_debt_ratio"}, {"domain": "OWASP-Dependency-Check", "type": "INT", "name": "total_dependencies"}, {"domain": "Mutation analysis", "type": "INT", "name": "pitest_mutations_total"}, {"domain": "Maintainability", "type": "DATA", "name": "maintainability_rating_effort"}, {"domain": "Reliability", "type": "DATA", "name": "reliability_rating_effort"}, {"domain": "Security", "type": "DATA", "name": "security_rating_effort"}, {"domain": "Releasability", "type": "INT", "name": "releasability_effort"}, {"domain": "Size", "type": "INT", "name": "total_statements"}, {"domain": "OWASP-Dependency-Check", "type": "INT", "name": "total_vulnerabilities"}, {"domain": "Coverage", "type": "INT", "name": "uncovered_conditions"}, {"domain": "Coverage", "type": "INT", "name": "new_it_uncovered_conditions"}, {"domain": "Coverage", "type": "INT", "name": "new_uncovered_conditions"}, {"domain": "Coverage", "type": "INT", "name": "uncovered_lines"}, {"domain": "Coverage", "type": "INT", "name": "new_it_uncovered_lines"}, {"domain": "Coverage", "type": "INT", "name": "new_uncovered_lines"}, {"domain": "Coverage", "type": "DATA", "name": "test_data"}, {"domain": "Coverage", "type": "MILLISEC", "name": "test_execution_time"}, {"domain": "Coverage", "type": "INT", "name": "test_errors"}, {"domain": "Coverage", "type": "INT", "name": "test_failures"}, {"domain": "Coverage", "type": "PERCENT", "name": "test_success_density"}, {"domain": "Coverage", "type": "INT", "name": "tests"}, {"domain": "Security", "type": "INT", "name": "vulnerabilities"}, {"domain": "OWASP-Dependency-Check", "type": "PERCENT", "name": "vulnerable_component_ratio"}, {"domain": "OWASP-Dependency-Check", "type": "INT", "name": "vulnerable_dependencies"}, {"domain": "Issues", "type": "INT", "name": "wont_fix_issues"}]' }
        }
      }
      ##Выносим метрики из массива в отдельные поля
      ruby {
        init => "require 'json'"
        code => "
          metrics_domains = {}
          JSON.parse(event.get('[@metadata][metrics_json]')).each { |metric|
            metrics_domains[metric['name']] = metric['domain']
          }
          id = 0
          unless event.get('[sonar_measures][periods]').nil?
            event.get('[sonar_measures][periods]').each { |period|
              if period['mode'] == 'previous_version'
                id = period['index']
              end
            }
          end
          unless event.get('[sonar_measures][component][measures]').nil?
            event.get('[sonar_measures][component][measures]').each { |measure|
              if (measure['value']).nil?
                measure['periods'].each { |period|
                  if period['index'] == id
                    unless (metrics_domains[measure['metric']]).nil?
                      event.set('[' + metrics_domains[measure['metric']] + '][' + measure['metric'] + ']', period['value'].to_f)
                    end
                  end
                }
              else
                unless (metrics_domains[measure['metric']]).nil?
                  event.set('[' + metrics_domains[measure['metric']] + '][' + measure['metric'] + ']', measure['value'].to_f)
                end
              end
            }
          end
        "
        remove_field => [ "[sonar_measures]" ]
      }
    }

    if ("" in [taskId] and [taskId] != "") {
      opensearch {
        id       => "10-sonar-webhook.conf_2_elasticsearch"
        hosts    => ["10.27.0.29:9200"]
        ca_file  => "/usr/share/logstash/misc/ca.crt"
        user     => "{{ opensearch_tech_user }}"
        password => "{{ opensearch_tech_password }}"
        index    => "metrics-jenkins-*,metrics-jenkinsqa-*"
        query    => "sonar_task_id.keyword:%{[taskId]}"
        fields   => {
          "dit_cluster_code"       => "dit_cluster_code"
          "tribe"                  => "tribe"
          "dit_squad_code"         => "dit_squad_code"
          "squad_type"             => "squad_type"
          "org_unit1"              => "org_unit1"
          "org_unit2"              => "org_unit2"
          "org_unit3"              => "org_unit3"
          "org_unit4"              => "org_unit4"
          "product_code"           => "product_code"
          "cluster_code"           => "cluster_code"
          "system_code_sharepoint" => "system_code_sharepoint"
          "dit_code"               => "dit_code"
          "nexus_artifact_upload"  => "nexus_artifact_upload"
          "dit_squad"              => "dit_squad"
          "program"                => "program"
          "tribe_code"             => "tribe_code"
          "competence"             => "competence"
          "product"                => "product"
          "chapter_code"           => "chapter_code"
          "conf_item"              => "conf_item"
          "dit_cluster"            => "dit_cluster"
          "squad"                  => "squad"
          "competence_code"        => "competence_code"
          "chapter"                => "chapter"
          "system_hpsm"            => "system_hpsm"
          "cluster"                => "cluster"
          "system_sharepoint"      => "system_sharepoint"
          "dit_name"               => "dit_name"
          "squad_code"             => "squad_code"
          "kpi"                    => "kpi"
          "cluster_lead"           => "cluster_lead"
        }
        enable_sort => false
        result_size => 1
      }

      ruby {
        id   => "10-sonar-webhook.conf_3_ruby"
        path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
        script_params => {
          "fields" => [
            "dit_cluster_code",
            "tribe",
            "dit_squad_code",
            "squad_type",
            "org_unit1",
            "org_unit2",
            "org_unit3",
            "org_unit4",
            "product_code",
            "cluster_code",
            "system_code_sharepoint",
            "dit_code",
            "nexus_artifact_upload",
            "dit_squad",
            "program",
            "tribe_code",
            "competence",
            "product",
            "chapter_code",
            "conf_item",
            "dit_cluster",
            "squad",
            "competence_code",
            "chapter",
            "system_hpsm",
            "cluster",
            "system_sharepoint",
            "dit_name",
            "squad_code",
            "kpi",
            "cluster_lead"
          ]
        }
      }
    }
    if "" not in [system_tribe] and "" not in [system_tribe][0] and ("" in [conf_item] or "" in [conf_item][0]) {
      esquerystring {
        id     => "10-sonar-webhook.conf_4_esquerystring"
        source => "[conf_item]"
        target => "[@metadata][system_tribe][conf_item]"
      }
      if ("" in [@metadata][system_tribe][conf_item] and [@metadata][system_tribe][conf_item] != "") {
        opensearch {
          id       => "10-sonar-webhook.conf_5_elasticsearch"
          hosts    => ["10.27.0.29:9200"]
          ca_file  => "/usr/share/logstash/misc/ca.crt"
          user     => "{{ opensearch_tech_user }}"
          password => "{{ opensearch_tech_password }}"
          index    => "metrics-mappings-as2tribe"
          query    => "conf_item:%{[@metadata][system_tribe][conf_item]}"
          fields   => {
            "service"            => "service"
            "system_tribe"       => "system_tribe"
            "system"             => "system"
            "service_tribe_code" => "service_tribe_code"
            "system_tribe_code"  => "system_tribe_code"
            "service_tribe"      => "service_tribe"
          }
          enable_sort => false
          result_size => 1000
        }

        ruby {
          id   => "10-sonar-webhook.conf_6_ruby"
          path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
          script_params => {
            "fields" => [
              "service",
              "system_tribe",
              "system",
              "service_tribe_code",
              "system_tribe_code",
              "service_tribe"
            ]
          }
        }
      }
    }
  }
}

output {
  if [type] == "sonar-webhook" {
    opensearch {
      id                => "sonar-sonar-webhook-elasticsearch-output"
      hosts             => ["10.27.0.29:9200"]
      cacert            => "/usr/share/logstash/misc/ca.crt"
      ssl               => true
      ssl_certificate_verification => false
      user              => "{{ opensearch_tech_user }}"
      password          => "{{ opensearch_tech_password }}"
      script            => "metrics-sonar-upsert"
      script_var_name   => "event"
      script_lang       => ""
      doc_as_upsert     => true
      action            => "update"
      document_id       => "%{[@metadata][output][document_id]}"
      script_type       => "indexed"
      index             => "metrics-%{type}-%{+YYYY}"
      manage_template   => false
      retry_on_conflict => 10
    }
  }
}
