
filter {
  if ([type] == "sm_ci" and "sync-mq" not in [tags]) {

## Для обратной совместимости названия полей приводим к верхнему регистру
    mutate {
      rename => {
        "logical_name" => "LOGICAL_NAME"
        "logical_name2" => "LOGICAL_NAME2"
        "hpc_status" => "HPC_STATUS"
        "hpc_status2" => "HPC_STATUS2"
        "environment" => "ENVIRONMENT"
        "environment2" => "ENVIRONMENT2"
        "tps_name" => "TPS_NAME"
        "tps_name2" => "TPS_NAME2"
        "device_name" => "DEVICE_NAME"
        "device_name2" => "DEVICE_NAME2"
        "subtype" => "SUBTYPE"
        "subtype2" => "SUBTYPE2"
        "tps_blocked" => "TPS_BLOCKED"
        "tps_block" => "TPS_BLOCK"
        "tps_block_id" => "TPS_BLOCK_ID"
        "org_name" => "ORG_NAME"
        "org_code" => "ORG_CODE"
        "it_service_conf_item" => "IT_SERVICE_CONF_ITEM"
        "it_service_critical_level" => "IT_SERVICE_CRITICAL_LEVEL"
        "created_by_date" => "CREATED_BY_DATE"
        "last_update_date" => "LAST_UPDATE_DATE"
        "type_sm" => "TYPE_SM"
        "count_admin" => "COUNT_ADMIN"
        "tps_logical_number" => "TPS_LOGICAL_NUMBER"
        "tps_logical_number2" => "TPS_LOGICAL_NUMBER2"
        "hpc_delete_candidate" => "HPC_DELETE_CANDIDATE"
        "nexus_artifact_url" => "NEXUS_ARTIFACT_URL"
        "for_jira" => "FOR_JIRA"
        "tps_centralization" => "TPS_CENTRALIZATION"
        "tps_search_code" => "TPS_SEARCH_CODE"
        "tps_coordinator_name" => "TPS_COORDINATOR_NAME"
        "tps_own_coordinator_name" => "TPS_OWN_COORDINATOR_NAME"
        "is_active" => "IS_ACTIVE"
      }
    }

## Для обратной совместимости null'ы заменяем на пустые строки
    ruby {
      code => "
        hash = event.to_hash
        hash.each { |k, v|
          if v.nil?
            event.set(k, '')
          end
        }
      "
    }

    if [DEVICE_NAME] == "ИТ-услуга" {
      mutate { add_field => { "IT_SERVICE" => true } }
    }
    else {
      mutate { add_field => { "IT_SERVICE" => false } }
    }

    if [SUBTYPE] == "Дистрибутив (версия) ППО" {
      mutate { add_field => { "IS_DISTRIB" => true } }
    } else {
      mutate { add_field => { "IS_DISTRIB" => false } }
    }

    ruby {
      code => "
        unless event.get('version_repository').nil?
          event.set('version_repository', event.get('version_repository').split(/\r?\n/))
        end
        unless event.get('sonar_portfolio').nil?
          event.set('sonar_portfolio', event.get('sonar_portfolio').split(/\r?\n/))
        end
        unless event.get('test_system_project').nil?
          event.set('test_system_project', event.get('test_system_project').split(/\r?\n/))
        end
      "
    }

    mutate {
      replace => {
        "[@metadata][output][document_id]" => "%{LOGICAL_NAME}"
        "[@metadata][output][index]"       => "metrics-mappings-%{type}"
      }
      remove_field => [ "message", "source", "input_type", "offset" ]
      strip => [ "TPS_NAME", "TPS_NAME2", "version_repository", "test_system_project", "sonar_portfolio" ]
      convert => {
        "IT_SERVICE"  => boolean
        "FOR_JIRA"    => boolean
        "IS_ACTIVE"   => boolean
        "IS_DISTRIB"  => boolean
      }
    }

    mutate {
      lowercase => ["test_system_project", "sonar_portfolio", "version_repository"]
    }


    mutate {
      add_field => { "@receive_timestamp" => "%{@timestamp}" }
    }
    date {
      match => [ "@receive_timestamp", "ISO8601" ]
      target => "@receive_timestamp"
    }

    date {
      match => [ "[LAST_UPDATE_DATE]", "ISO8601" ]
      timezone => "Europe/Moscow"
      target => "@timestamp"
    }
    if "" in [CREATED_BY_DATE] {
      if [CREATED_BY_DATE] != "" {
        date {
          match => [ "CREATED_BY_DATE", "ISO8601" ]
          timezone => "Europe/Moscow"
          target => "CREATED_BY_DATE"
        }
      } else {
        mutate {
          remove_field => ["CREATED_BY_DATE"]
        }
      }
    }



    if "http://" in [NEXUS_ARTIFACT_URL] or "https://" in [NEXUS_ARTIFACT_URL] {
      mutate {
        gsub => ["NEXUS_ARTIFACT_URL", "(?<!:)/{2,}", "/"] #Замена двойных и более слешей в ссылках, кроме тех, которые идут после https?:
      }
            ruby {
        code => "
          unless event.get('NEXUS_ARTIFACT_URL').nil?
            ra = []
            ra2 = []
            [event.get('NEXUS_ARTIFACT_URL')].flatten.each{ |artifact| if artifact.include? 'maven/redirect' then ra2.push(artifact) else ra.push(artifact) end }
            event.set('NEXUS_ARTIFACT_URL_1', ra.uniq)
            event.set('NEXUS_ARTIFACT_URL_2', ra2.uniq)
          end
        "
      }
      if "" in [NEXUS_ARTIFACT_URL_1][0] or "" in [NEXUS_ARTIFACT_URL_1][0] {
        grok {
          match => { "[NEXUS_ARTIFACT_URL_1]" => "http(s)?://((sw\.v-serv\.ru(:80)?|172\.24\.32\.94:8082)/nexus-cd)/repository/(?<repo_id_1>[^/ &]+)/(content/)?(?<group_id_1>[^ &\(\)]*?)/(?<artifact_id_1>[^/ &\(\)]+)/(?<version_1>[^/ &\(\)]+)/(?<file_name_1>[^/ &]+)([^0-9a-zA-Z])*?($|\[|\<|\)|\()" }
        }
      }

      if "" in [NEXUS_ARTIFACT_URL_2][0] or "" in [NEXUS_ARTIFACT_URL_2][0] {
        grok {
          match => { "[NEXUS_ARTIFACT_URL_2]" => "http(s)?://((sw\.v-serv\.ru(:80)?|172\.24\.32\.94:8082)/nexus-cd)/(service/local/artifact/maven/redirect)\?%{NOTSPACE:url_params}" }
        }
        if "g=" in [url_params][0] or "g=" in [url_params] {
          kv {
            source => "url_params"
            field_split => "&?"
          }
          mutate {
            rename => {
              "r" => "repo_id_2"
              "g" => "group_id_2"
              "a" => "artifact_id_2"
              "v" => "version_2"
            }
          }
          if "" in [c] {
            mutate {
              replace => {
                "file_name_2" => "%{[artifact_id_2]}-%{[version_2]}-%{c}.%{e}"
              }
            }
          } else {
            mutate {
              replace => {
                "file_name_2" => "%{[artifact_id_2]}-%{[version_2]}.%{e}"
              }
            }
          }
        }
      }
      ruby {
        code => "
          nexus_artifacts_1 = []
          unless event.get('version_1').nil? && event.get('repo_id_1').nil? && event.get('group_id_1').nil? && event.get('artifact_id_1').nil?
            [event.get('version_1')].flatten.each_with_index { |version, indx|
              unless [event.get('repo_id_1')].flatten[indx].nil? &&
                     [event.get('group_id_1')].flatten[indx].nil? &&
                     [event.get('artifact_id_1')].flatten[indx].nil? &&
                     [event.get('file_name_1')].flatten[indx].nil? &&
                     !['rar', 'zip', 'ipa', 'gz', 'tar', 'exe', 'nupkg', 'jar', 'apk', 'tgz', 'gst', 'war', 'bin', 'sav'].include?(File.extname([event.get('file_name_1')].flatten[indx]).gsub('.', ''))
                nexus_artifacts_1.push([event.get('repo_id_1')].flatten[indx] + ':' + [event.get('group_id_1')].flatten[indx].gsub('/', '.') + '/' + [event.get('artifact_id_1')].flatten[indx] + '/' + version)
              end
            }
            nexus_artifacts_1 = nexus_artifacts_1.uniq
          end
          nexus_artifacts_2 = []
          unless event.get('version_2').nil? && event.get('repo_id_2').nil? && event.get('group_id_2').nil? && event.get('artifact_id_2').nil?
            [event.get('version_2')].flatten.each_with_index { |version, indx|
              unless [event.get('repo_id_2')].flatten[indx].nil? &&
                     [event.get('group_id_2')].flatten[indx].nil? &&
                     [event.get('artifact_id_2')].flatten[indx].nil? &&
                     [event.get('file_name_2')].flatten[indx].nil? &&
                     !['rar', 'zip', 'ipa', 'gz', 'tar', 'exe', 'nupkg', 'jar', 'apk', 'tgz', 'gst', 'war', 'bin', 'sav'].include?(File.extname([event.get('file_name_2')].flatten[indx]).gsub('.', ''))
                nexus_artifacts_2.push([event.get('repo_id_2')].flatten[indx] + ':' + [event.get('group_id_2')].flatten[indx].gsub('/', '.') + '/' + [event.get('artifact_id_2')].flatten[indx] + '/' + version)
              end
            }
            nexus_artifacts_2 = nexus_artifacts_2.uniq
          end
          event.set('nexus_artifact', [nexus_artifacts_1, nexus_artifacts_2].flatten.uniq)
        "
        remove_field => [
                          "NEXUS_ARTIFACT_URL_1",
                          "repo_id_1",
                          "file_name_1",
                          "group_id_1",
                          "artifact_id_1",
                          "version_1",                    "NEXUS_ARTIFACT_URL_2",
                          "repo_id_2",
                          "file_name_2",
                          "group_id_2",
                          "artifact_id_2",
                          "version_2"                  ]
      }
    }

    mutate {
      copy => {
        "ORG_NAME" => "tribe"
        "ORG_CODE" => "tribe_code"
      }
    }

## Ветка, копирования данных в справочник АС (as2tribe)
    if ![IS_DISTRIB] {
      clone {
        clones => ["as2tribe-smci"]
        add_field => {
          "is_dit"    => false
        }
        add_tag => ["custom-output"]
      }

      if [type] == "as2tribe-smci" {
        mutate {
          rename => {
            "LOGICAL_NAME"               => "conf_item"
            "TPS_NAME"                   => "name"
            "IS_DISTRIB"                 => "is_distrib"
            "IT_SERVICE"                 => "it_service"
            "IT_SERVICE_CONF_ITEM"       => "parent_it_service_conf_item"
            "IT_SERVICE_CRITICAL_LEVEL"  => "it_service_critical_level"
            "HPC_STATUS"                 => "status"
            "SUBTYPE"                    => "as_type"
            "IS_ACTIVE"                  => "is_active"
            "TPS_BLOCK"                  => "functional_block"
            "TPS_BLOCK_ID"               => "functional_block_id"
          }
        }

        if [it_service] {
          mutate {
            copy => {
              "name"        => "service"
              "tribe"       => "service_tribe"
              "tribe_code"  => "service_tribe_code"
            }
         }
        }
        else {
          mutate {
            copy => {
             "name"         => "system"
             "tribe"        => "system_tribe"
             "tribe_code"   => "system_tribe_code"
            }
          }
        }

        if "" in [version_repository] or "" in [version_repository][0] {
          ruby {
            init => "
              require 'logstash/filters/grok'
              @grok = LogStash::Filters::Grok.new({
                'match' => { 'version_repository_single' => 'https?://(sw\.v-serv\.ru)/bitbucket-ci/projects/(?<bitbucket_id_parsed>[^/]+(/repos/)?[^/]+)?' },
                'overwrite' => [ 'bitbucket_id_parsed' ]
              })
              @grok.register
            "
            code => "
              begin
                event.set('bitbucket_id', [event.get('version_repository').clone].flatten.map {
                  |version_repository|
                    event.set('version_repository_single', version_repository)
                    @grok.filter(event)
                    bitbucket_segment = 'sigma'
                    !event.get('bitbucket_id_parsed').nil? ? bitbucket_segment + '@' + event.get('bitbucket_id_parsed').gsub('/repos', '') : nil
                }.reject{|i| i.nil? || i.empty? })
                    event.remove('version_repository_single')
                    event.remove('bitbucket_id_parsed')
                  rescue StandardError => msg
                event.set('ruby_exception', {
                  'action'=> 'parse version_repository',
                  'error' => msg.message,
                  'trace' => msg.backtrace.inspect
                }.to_json)
              end
            "
          }
        }

        prune {
          whitelist_names => [
            "^@timestamp$",
            "^@receive_timestamp$",
            "^tags$",
            "^segment$",
            "^logstash$",
            "^as_type$",
            "^conf_item$",
            "^is_dit$",
            "^parent_it_service_conf_item$",
            "^it_service_critical_level$",
            "^it_service$",
            "^status$",
            "^is_active$",
            "^is_distrib$",
            "^DEVICE_NAME$",
            "^test_system$",
            "^test_system_segment$",
            "^test_system_project$",
            "^sonar_portfolio$",
            "^version_repository$",
            "^bitbucket_id$",
            "^functional_block$",
            "^functional_block_id$",
            "^tribe$",
            "^tribe_code$",
            "^name$",
            "^service$",
            "^service_tribe$",
            "^service_tribe_code$",
            "^system$",
            "^system_tribe$",
            "^system_tribe_code$",
            "^system_hpsm$"
          ]
        }
        mutate {
          replace => {
            "[@metadata][output][index]"  =>  "metrics-mappings-as2tribe"
            "[type]"                      =>  "as2tribe"
          }
        }
      }
    }

    if [type] == "sm_ci" {
    ## Чистка полей, которые только для as2tribe и не нужны в sm_ci
      prune {
        blacklist_names => [
          "^test_system$",
          "^test_system_segment$",
          "^test_system_project$",
          "^sonar_portfolio$",
          "^version_repository$"
        ]
      }
    }
  }
}
