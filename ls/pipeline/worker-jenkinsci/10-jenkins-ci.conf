filter {
    if ([type] == "jenkins-ci" and "sync-mq" not in [tags]) {
      mutate {
        replace => {
          "type" => "jenkins"
        }
      }
      if ("" in [buildUrl]) {
        mutate {
          add_field => {"[@metadata][search][jira_project_key]" => "%{buildUrl}"}
        }
        mutate {
          gsub => ["[@metadata][search][jira_project_key]", "job/([^/]+)(/.*)?$", "\1"]
          uppercase => ["[@metadata][search][jira_project_key]"]
        }
        if ("" in [@metadata][search][jira_project_key] and [@metadata][search][jira_project_key] != "") {
        opensearch {
          id       => "10-jenkins-ci.conf_0_elasticsearch"
          hosts    => [{{ opensearch_host_port }}]
          ca_file  => "/usr/share/logstash/misc/ca.crt"
          user     => "{{ opensearch_tech_user }}"
          password => "{{ opensearch_tech_password }}"
          index    => "metrics-mappings-sbergilestruct"
          query    => "jira.project.key.keyword:%{[@metadata][search][jira_project_key]}"
          fields   => {
            "tribe"      => "tribe"
            "squad_info" => "squad_info"
            "squad_type" => "squad_type"
            "squad"      => "squad"
            "squad_code" => "squad_code"
            "tribe_code" => "tribe_code"
          }
          enable_sort => false
          result_size => 1000
          ssl      => false
        }
  
        ruby {
          id   => "10-jenkins-ci.conf_1_ruby"
          path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
          script_params => {
            "fields" => [
              "tribe",
              "squad_info",
              "squad_type",
              "squad",
              "squad_code",
              "tribe_code"
            ]
          }
        }
      }
      }
    }
  
    if ([type] == "jenkins" and "sync-mq" not in [tags]) {
      if [host] not in [ "172.24.34.149" ] {
         mutate {
           add_tag => ["_unapproved_source"]
         }
      }
  
      if [endTime] {
        mutate {
          add_field => { "@receive_timestamp" => "%{@timestamp}" }
        }
        date {
          match => [ "@receive_timestamp", "ISO8601" ]
          target => "@receive_timestamp"
        }
  
        date {
          match => [ "[endTime]", "UNIX_MS" ]
          target => "@timestamp"
        }
      } else if [startTime] {
        mutate {
          add_field => { "@receive_timestamp" => "%{@timestamp}" }
        }
        date {
          match => [ "@receive_timestamp", "ISO8601" ]
          target => "@receive_timestamp"
        }
  
        date {
          match => [ "[startTime]", "UNIX_MS" ]
          target => "@timestamp"
        }
      }
  
      grok {
        match => { "[jobDescription]" => "(?i)(?<no_deploy>\[no deploy\])" }
      }
  
      if "" in [no_deploy] {
        mutate {
          add_tag => ["no_deploy"]
        }
      }
  
      if "no_deploy" not in [tags] {
        grok {
          match => { "[buildDescription]" => "(?i)(?<no_deploy>\[no deploy\])" }
        }
  
        if "" in [no_deploy] {
          mutate {
            add_tag => ["no_deploy"]
          }
        }
      }
  
      mutate {
        replace => {
          "[@metadata][output][document_id]" => ""
          "[@metadata][output][index]"       => "metrics-%{type}-%{+YYYY.MM}"
        }
        remove_field => [ "headers", "parameters", "no_deploy" ]
      }
  
      if ("" in [buildUrl]) {
        mutate {
          add_field => {"jobPath" => "%{buildUrl}"}
        }
        mutate {
          gsub => ["jobPath", "/[0-9]+/$", ""]
        }
        if [eventType] == "build" {
          grok {
            match => { "buildUrl" => "/(?<buildUrlPart>[^/]+?)/[^/]+/[0-9]+/$" }
          }
          if [buildUrlPart] != "job" {
            mutate {
              add_tag => ["submodule"]
            }
          }
          mutate {
            remove_field => ["buildUrlPart"]
          }
        }
      }
  
      date { match => ["createdDate", "ISO8601", "UNIX_MS", "UNIX"]  target => "createdDateD" }
      date { match => ["updatedDate", "ISO8601", "UNIX_MS", "UNIX"]  target => "updatedDateD" }
      date { match => ["startTime", "ISO8601", "UNIX_MS", "UNIX"]  target => "startTimeD" }
      date { match => ["entryTime", "ISO8601", "UNIX_MS", "UNIX"]  target => "entryTimeD" }
      date { match => ["endTime", "ISO8601", "UNIX_MS", "UNIX"]  target => "endTimeD" }
      date { match => ["exitTime", "ISO8601", "UNIX_MS", "UNIX"]  target => "exitTimeD" }
  
      if [eventType] in ["build", "stage"] {
  
        if [eventType] == "build" {
  
          mutate {
            replace => {
              "[@metadata][output][document_id]" => "%{ciUrl}_%{buildUrl}_%{eventType}_%{result}"
            }
          }
          grok {
            match => { "ciUrl" => "^http(s)?://%{DATA:[@metadata][ciUrl]}$" }
          }
  
          if [result] == "INPROGRESS" {
            mutate {
              add_tag => ["job_started"]
            }
          }
  
          if [result] in ["SUCCESS","FAILURE","ABORTED","UNSTABLE"] {
            mutate {
              add_tag => ["job_finished"]
            }
          }
  
          elapsed {
            start_tag => "job_started"
            end_tag => "job_finished"
            unique_id_field => "buildUrl"
            timeout => 1209600 # 14 days
            new_event_on_match => false
          }
        } else {
          mutate {
            replace => {
              "[@metadata][output][document_id]" => "%{ciUrl}_%{stageUrl}_%{eventType}_%{result}"
            }
          }
        }
  
        fingerprint {
          key => "mazafuckaaa"
          source => "[@metadata][output][document_id]"
          target => "[@metadata][output][document_id]"
        }
  
        if "" in [actions][type] or "" in [actions][0][type] {
  
          ruby {
            id   => "10-jenkins-ci.conf_2_ruby"
            init => "
              require 'logstash/filters/grok'
              require 'logstash/filters/opensearch'
              require 'logstash/filters/rest'
              require 'logstash/filters/urldecode'
              require 'logstash/filters/kv'
              @grok_bb_repo = LogStash::Filters::Grok.new({
                'match'     => { '[action_single][url]' => '(ssh|http|https)://([^@]+@)?(sw.v-serv.ru|172.24.35.164)(:7999)?(/bitbucket-ci)?(/scm)?/%{GREEDYDATA:bitbucket_proj_id}/%{GREEDYDATA:bitbucket_repo_slug}.git' },
                'overwrite' => [ 'bitbucket_proj_id', 'bitbucket_repo_slug' ]
              })
              @grok_bb_repo.register
  
              @rest_stash_author = LogStash::Filters::Rest.new({
                'id' => 'jenkins_ci_stash_author',
                'request' => {
          # N Platonov
          # TODO: past the correct link
                  'url' => 'https://sw.v-serv.ru/bitbucket-ci/rest/api/1.0/projects/%{bitbucket_proj_id}/repos/%{bitbucket_repo_slug}/commits/%{[action_single][commit]}',
                  'headers' => {
                    'Authorization' => 'Basic dHV6X2Rldm9wc21vbl9iYmNpX3Jlc3Q6TmxzVytmcmxnPUNfdDRpU1d1X3I='
                  },
                  'automatic_retries' => 3
                },
                'truststore' => '/usr/share/logstash/misc/ca2.jks',
                'truststore_password' => 'password',
                'json'      => true,
                'target'    => 'bitbucket_commit',
                'fallback'  => {
                  'bitbucket_error' => true
                }
              })
              @rest_stash_author.register
  
              @rest_stash_branch = LogStash::Filters::Rest.new({
                'id' => 'jenkins_ci_stash_branch',
                'request' => {
          # N Platonov
          # TODO: remove
                  'url' => 'https://sw.v-serv.ru/bitbucket-ci/rest/branch-utils/1.0/projects/%{bitbucket_proj_id}/repos/%{bitbucket_repo_slug}/branches/info/%{[action_single][commit]}',
                  'headers' => {
                    'Authorization' => 'Basic dHV6X2Rldm9wc21vbl9iYmNpX3Jlc3Q6TmxzVytmcmxnPUNfdDRpU1d1X3I='
                  },
                  'automatic_retries' => 3
                },
                'truststore' => '/usr/share/logstash/misc/ca2.jks',
                'truststore_password' => 'password',
                'json'      => true,
                'target'    => 'bitbucket_branches',
                'fallback'  => {
                  'bitbucket_error' => true
                }
              })
              @rest_stash_branch.register
  
              @grok_sonar = LogStash::Filters::Grok.new({
                'match' => {
                  '[action_single][url]' => [
                    'http(s)?://(sw.v-serv.ru/sonar)/dashboard/index/%{GREEDYDATA:sonar_project_key}',
                  ],
                  '[action_single][taskUrl]' => [
                    'http(s)?://(sw.v-serv.ru/sonar)/api/ce/task\?id=%{GREEDYDATA:sonar_task_id}',
                  ]
                },
              })
              @grok_sonar.register
  
              @urldecode_sonar = LogStash::Filters::Urldecode.new({
                'field' => '[sonar_project_key]'
              })
              @urldecode_sonar.register
  
              @grok_nexus_upload = LogStash::Filters::Grok.new({
                'match'     => { '[action_single][url]' => 'http(s)?://((sw\.v-serv\.ru(:80)?|172\.24\.32\.94:8082)/nexus-cd)/repository/(?<repo_id>[^/ &]+)/(content/)?(?<group_id>[^ &\(\)]*?)/(?<artifact_id>[^/ &\(\)]+)/(?<version>[^/ &\(\)]+)/(?<file_upload>[^/ &]+)([^0-9a-zA-Z])*?($|\[|\<|\)|\()' },
                'overwrite' => [ 'repo_id', 'group_id', 'artifact_id', 'version', 'file_upload' ]
              })
              @grok_nexus_upload.register
  
              @grok_nexus_repo_id = LogStash::Filters::Grok.new({
                'match'     => { 'repo_id' => '%{DATA:repo_group}_(?:release|snapshot|thirdparty|group)|CC_CD_KK_repo|Nexus_PROD' },
                'overwrite' => [ 'repo_group' ]
              })
              @grok_nexus_repo_id.register
  
              @grok_nexus_download_maven = LogStash::Filters::Grok.new({
                'match'     => { '[action_single][url]' => 'http(s)?://((sw\.v-serv\.ru(:80)?|172\.24\.32\.94:8082)/nexus-cd)/(service/local/artifact/maven/(redirect|content))\?%{NOTSPACE:url_params}' },
                'overwrite' => [ 'url_params' ]
              })
              @grok_nexus_download_maven.register
  
              @kv_nexus_download_maven = LogStash::Filters::KV.new({
                'source'      => 'url_params',
                'field_split' => '&?'
              })
              @kv_nexus_download_maven.register
  
              @grok_nexus_download = LogStash::Filters::Grok.new({
                'match'     => { '[action_single][url]' => 'http(s)?://((sw\.v-serv\.ru(:80)?|172\.24\.32\.94:8082)/nexus-cd)/repository/(?<repo_id>[^/ &]+)/(content/)?(?<group_id>[^ &\(\)]*?)/(?<artifact_id>[^/ &\(\)]+)/(?<version>[^/ &\(\)]+)/(?<file_name>[^/ &]+)([^0-9a-zA-Z])*?($|\[|\<|\)|\()' },
                'overwrite' => [ 'repo_id', 'group_id', 'artifact_id', 'version', 'file_name' ]
              })
              @grok_nexus_download.register
  
            "
            code => "
              begin
  
                ## Инициируем массивы сбора данных
                bitbucket_repo = []
                bitbucket_repo_branch = []
                bitbucket_repo_commit = []
                bitbucket_commit_hash = []
                bb_branches_error = []
                bb_commit_error = []
                nexus_artifact = []
                nexus_artifact_no_version = []
                nexus_artifact_upload = []
                nexus_artifact_upload_no_version = []
                file_upload = []
                sonar_project_key = []
                sonar_task_id = []
                commit_email = []
                kpi = []
                system_sharepoint = []
                system_code_sharepoint = []
  
                ## В цикле обрабатываем все actions
                event.get('[actions]').each { |action|
                  event.set('action_single', action)
  
                  ## Инициация по коммиту
                  if (action['type'] == 'RevisionParameterAction' and event.get('buildCause').include? 'commit notification') or ((action['type'] == 'BuildData' and not event.get('buildCause').include? 'commit notification'))
  
                    bitbucket_commit_hash.push(action['commit'])
                    commit_email.push(action['commit_email'].downcase) if action.key?('commit_email') and action['commit_email'].include? '@'
  
                    @grok_bb_repo.filter(event)
                    if event.get('bitbucket_proj_id').is_a?(String)
                      ## Маппинг на АС из справочника Sharepoint Checklist Devops
                      ##Полное совпадение
                      event.set('[@metadata][search][as_query]', event.sprintf('bitbucket_proj_id.keyword:' + 34.chr + '%{bitbucket_proj_id}' + 34.chr + ' AND bitbucket_repo_slug.keyword:' + 34.chr + '%{bitbucket_repo_slug}' + 34.chr))

  
                      kpi.push(event.get('kpi'))
                      system_sharepoint.push(event.get('system_sharepoint'))
                      system_code_sharepoint.push(event.get('system_code_sharepoint'))
  
                      bitbucket_repo.push(event.sprintf('%{bitbucket_proj_id}/%{bitbucket_repo_slug}'))
                      bitbucket_repo_commit.push(event.sprintf('%{bitbucket_proj_id}/%{bitbucket_repo_slug}#%{[action_single][commit]}'))
  
                      ## Получаем автора комита из BitBucket
                      @rest_stash_author.filter(event)
  
                      if event.get('bitbucket_commit').key?('bitbucket_error')
                        bb_commit_error.push(event.sprintf('%{[bitbucket_commit][bitbucket_error]}'))
                      else
                        commit_email.push(event.get('[bitbucket_commit][author][emailAddress]').downcase)
                      end
                      event.remove('bitbucket_commit')
  
                      if action.key?('branch') and action['branch'].is_a?(String)
                        bitbucket_repo_branch.push(event.sprintf('%{bitbucket_proj_id}/%{bitbucket_repo_slug}#%{[action_single][branch]}'))
                      else
                        ## Получаем список веток, соответствующих комиту
                        @rest_stash_branch.filter(event)
  
                        if event.get('bitbucket_branches').key?('bitbucket_error')
                          bb_branches_error.push(event.sprintf('%{[bitbucket_branches][bitbucket_error]}'))
                        else
                          if event.get('bitbucket_repo_slug').is_a?(String)
                            unless event.get('[bitbucket_branches][values]').nil?
                              bitbucket_repo_branch +=
                                [event.get('[bitbucket_branches][values]')].flatten
                                  .select{ |branch| branch['type'] == 'BRANCH'}
                                  .map { |branch| event.get('[bitbucket_proj_id]') + '/' + event.get('[bitbucket_repo_slug]') + '#' + branch['displayId'] }
                            end
                          end
                        end
                        event.remove('bitbucket_branches')
                      end
                    end
                    ['bitbucket_proj_id', 'bitbucket_repo_slug'].each { |fieldname| event.remove(fieldname) }
                  end
  
                  ## Отправка отчета в SonarQube
                  if action['type'] == 'SonarAnalysisAction'
                    @grok_sonar.filter(event)
                    if event.get('sonar_project_key').is_a?(String)
                      @urldecode_sonar.filter(event)
                      sonar_project_key.push(event.get('sonar_project_key'))
                    end
                    if event.get('sonar_task_id').is_a?(String)
                      sonar_task_id.push(event.get('sonar_task_id'))
                    end
                  end
  
                  ## Отправка артефакта в Nexus
                  if action['type'] == 'NexusUploadAction'
                    @grok_nexus_upload.filter(event)
                    if event.get('repo_id').is_a?(String) and event.get('file_upload') != 'maven-metadata.xml'
                      @grok_nexus_repo_id.filter(event)
                      event.set('group_id', event.get('group_id').gsub('/', '.'))
                      event.set('repo_group', '@common@') if event.get('repo_id') == 'releases'
                      event.set('repo_group', event.get('repo_id')) unless event.get('repo_group').is_a?(String)
                      nexus_artifact_upload.push(event.sprintf('%{repo_group}:%{group_id}/%{artifact_id}/%{version}'))
                      nexus_artifact_upload_no_version.push(event.sprintf('%{repo_group}:%{group_id}/%{artifact_id}'))
                      file_upload.push(event.get('file_upload'))
                    end
                    [
                      'repo_id',
                      'repo_group',
                      'group_id',
                      'artifact_id',
                      'version',
                      'file_upload',
                    ].each { |fieldname| event.remove(fieldname) }
                  end
  
                  ## Получение артефакта из Nexus
                  if action['type'] == 'NexusDownloadAction' and not (action['url'].nil? or action['url'].include? 'nexus/content/groups/public' or action['url'].include? 'org/apache')
                    event.set('[action_single][url]', event.get('[action_single][url]').gsub(/(?<!:)\/{2,}/, '/')).strip
                    if event.get('[action_single][url]').include? 'maven/redirect' or event.get('[action_single][url]').include? 'maven/content'
                      @grok_nexus_download_maven.filter(event)
                      if event.get('url_params').is_a?(String) and event.get('url_params').include? 'g='
                        @kv_nexus_download_maven.filter(event)
                        event.set('repo_id', event.get('r'))
                        event.set('group_id', event.get('g'))
                        event.set('artifact_id', event.get('a'))
                        event.set('version', event.get('v'))
                        event.set('e', event.get('p')) unless event.get('e').is_a?(String)
                        if event.get('c').is_a?(String)
                          event.set('file_name', event.sprintf('%{artifact_id}-%{version}-%{c}.%{e}'))
                        else
                          event.set('file_name', event.sprintf('%{artifact_id}-%{version}.%{e}'))
                        end
                      end
                    else
                      @grok_nexus_download.filter(event)
                    end
                    if event.get('repo_id').is_a?(String) and not event.get('repo_id').include? 'thirdparty' and event.get('file_upload') != 'maven-metadata.xml'
                      @grok_nexus_repo_id.filter(event)
                      event.set('group_id', event.get('group_id').gsub('/', '.'))
                      event.set('repo_group', '@common@') if event.get('repo_id') == 'releases'
                      event.set('repo_group', event.get('repo_id')) unless event.get('repo_group').is_a?(String)
                      create_nexus_artifact = false
                      if event.get('file_name').is_a?(String)
                        if ['rar', 'zip', 'ipa', 'gz', 'tar', 'exe', 'nupkg', 'jar', 'apk', 'tgz', 'gst', 'war', 'bin', 'sav'].include?(File.extname(event.get('file_name')).gsub('.', '')) then create_nexus_artifact = true end
                      end
                      if create_nexus_artifact
                        nexus_artifact.push(event.sprintf('%{repo_group}:%{group_id}/%{artifact_id}/%{version}'))
                        nexus_artifact_no_version.push(event.sprintf('%{repo_group}:%{group_id}/%{artifact_id}'))
                      end
                    end
                    [
                      'url_params', 'r', 'g', 'a', 'v', 'c', 'f', 'e', 'p',
                      'repo_id',
                      'repo_group',
                      'group_id',
                      'artifact_id',
                      'version',
                      'file_name',
                    ].each { |fieldname| event.remove(fieldname) }
  
                  end
  
                  ## Очищаяем поля, которые могли установиться в процессе обработки одного action-а
                  ##   чтобы они не мешались на очередной итерации цикла
                  [
                    'action_single',
                    'bitbucket_repo',
                    'bitbucket_repo_branch',
                    'bitbucket_repo_commit',
                    'bitbucket_commit_hash',
                    'bb_branches_error',
                    'bb_commit_error',
                    'nexus_artifact',
                    'nexus_artifact_no_version',
                    'nexus_artifact_upload',
                    'nexus_artifact_upload_no_version',
                    'file_upload',
                    'sonar_project_key',
                    'sonar_task_id',
                    'commit_email',
                    'kpi',
                    'system_sharepoint',
                    'system_code_sharepoint',
                  ].each { |fieldname| event.remove(fieldname) }
                }
  
                ## Собранные значения устанавливаем в поля
                event.set('bitbucket_repo', bitbucket_repo) if bitbucket_repo.length > 0
                event.set('bitbucket_repo_branch', bitbucket_repo_branch) if bitbucket_repo_branch.length > 0
                event.set('bitbucket_repo_commit', bitbucket_repo_commit) if bitbucket_repo_commit.length > 0
                event.set('bitbucket_commit_hash', bitbucket_commit_hash) if bitbucket_commit_hash.length > 0
                event.set('bb_branches_error', bb_branches_error) if bb_branches_error.length > 0
                event.set('bb_commit_error', bb_commit_error) if bb_commit_error.length > 0
                event.set('nexus_artifact', nexus_artifact) if nexus_artifact.length > 0
                event.set('nexus_artifact_no_version', nexus_artifact_no_version) if nexus_artifact_no_version.length > 0
                event.set('nexus_artifact_upload', nexus_artifact_upload) if nexus_artifact_upload.length > 0
                event.set('nexus_artifact_upload_no_version', nexus_artifact_upload_no_version) if nexus_artifact_upload_no_version.length > 0
                event.set('file_upload', file_upload) if file_upload.length > 0
                event.set('sonar_project_key', sonar_project_key) if sonar_project_key.length > 0
                event.set('sonar_task_id', sonar_task_id) if sonar_task_id.length > 0
                event.set('commit_email', commit_email) if commit_email.length > 0
                event.set('kpi', kpi) if kpi.length > 0
                event.set('system_sharepoint', system_sharepoint) if system_sharepoint.length > 0
                event.set('system_code_sharepoint', system_code_sharepoint) if system_code_sharepoint.length > 0
  
              rescue StandardError => msg
                ## В случае ошибки сохраняем отладочную информацию
                event.set('ruby_exception', {
                  'action'=> 'parse actions',
                  'error' => msg.message,
                  'trace' => msg.backtrace.inspect
                }.to_json)
              end
            "
          }
  
          ruby {
            id   => "10-jenkins-ci.conf_4_ruby"
            path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
            script_params => {
              "fields" => [
                "bitbucket_repo",
                "bitbucket_repo_branch",
                "bitbucket_repo_commit",
                "bitbucket_commit_hash",
                "bb_branches_error",
                "bb_commit_error",
                "nexus_artifact",
                "nexus_artifact_no_version",
                "nexus_artifact_upload",
                "nexus_artifact_upload_no_version",
                "file_upload",
                "sonar_project_key",
                "sonar_task_id",
                "commit_email",
                "conf_item",
                "system_sharepoint",
                "system_code_sharepoint",
                "kpi",
                "system_hpsm"
              ]
            }
          }
  
          if ("" in [bitbucket_repo] or "" in [bitbucket_repo][0]) and ("" in [nexus_artifact_upload] or "" in [nexus_artifact_upload][0]) {
            mutate {
              add_tag => ["build"]
            }
          }
  
          if ("" not in [nexus_artifact]) and ("" not in [nexus_artifact][0]) {
            if [eventType]=="build" and [result] !="INPROGRESS" {
  
              ## Получение nexus_artifact из предыдущих stage
              esquerystring {
                source => "[buildUrl]"
                target => "[@metadata][search][buildUrl]"
              }
  
              esquerystring {
                source => "[ciUrl]"
                target => "[@metadata][search][ciUrl]"
              }
  
              mutate {
                add_field => {
                  "[@metadata][search][nexus_artifact_query]" => "ciUrl.keyword:%{[@metadata][search][ciUrl]} AND buildUrl.keyword:%{[@metadata][search][buildUrl]} AND eventType.keyword:stage AND NOT result.keyword:INPROGRESS AND _exists_:nexus_artifact"
                }
              }
              if ("" in [@metadata][search][nexus_artifact_query] and [@metadata][search][nexus_artifact_query] != "") {
              opensearch {
                id       => "10-jenkins-ci.conf_5_elasticsearch"
                hosts    => [{{ opensearch_host_port }}]
                ca_file  => "/usr/share/logstash/misc/ca.crt"
                user     => "{{ opensearch_tech_user }}"
                password => "{{ opensearch_tech_password }}"
                index    => "<metrics-jenkins*-{now/M{YYYY.MM}}*>,<metrics-jenkins*-{now-1d/M{YYYY.MM}}*>"
                query    => "%{[@metadata][search][nexus_artifact_query]}"
                fields   => {
                  "nexus_artifact" => "nexus_artifact"
                }
                enable_sort => true
                sort        => "@timestamp:desc"
                result_size => 1000
                ssl	   => false
              }
  
              ruby {
                id   => "10-jenkins-ci.conf_6_ruby"
                path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                script_params => {
                  "fields" => [
                    "nexus_artifact"
                  ]
                }
              }
            }
            }
          }
  
          if [eventType]=="stage" and [result] !="INPROGRESS" {
  
            ## Получение nexus_artifact из предыдущих stage
            esquerystring {
              source => "[buildUrl]"
              target => "[@metadata][search][buildUrl]"
            }
            esquerystring {
              source => "[ciUrl]"
              target => "[@metadata][search][ciUrl]"
            }
            mutate {
              add_field => {
                "[@metadata][search][nexus_artifact_query]" => "ciUrl.keyword:%{[@metadata][search][ciUrl]} AND buildUrl.keyword:%{[@metadata][search][buildUrl]} AND eventType.keyword:stage AND NOT result.keyword:INPROGRESS AND _exists_:nexus_artifact"
              }
            }
            if ("" in [@metadata][search][nexus_artifact_query] and [@metadata][search][nexus_artifact_query] != "") {
              opensearch {
                id       => "10-jenkins-ci.conf_7_elasticsearch"
                hosts    => [{{ opensearch_host_port }}]
                ca_file  => "/usr/share/logstash/misc/ca.crt"
                user     => "{{ opensearch_tech_user }}"
                password => "{{ opensearch_tech_password }}"
                index    => "<metrics-jenkins*-{now/M{YYYY.MM}}*>,<metrics-jenkins*-{now-1d/M{YYYY.MM}}*>"
                query    => "%{[@metadata][search][nexus_artifact_query]}"
                fields   => {
                  "nexus_artifact" => "prev_nexus_artifact"
                  "buildUrl"       => "prev_buildUrl"
                }
                enable_sort => true
                sort        => "@timestamp:desc"
                result_size => 10
                ssl	    => false
              }
  
              ruby {
                id   => "10-jenkins-ci.conf_8_ruby"
                path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                script_params => {
                  "fields" => [
                    "prev_nexus_artifact",
                    "prev_buildUrl"
                  ]
                }
              }
            }
  
            if "" in [prev_nexus_artifact] or "" in [prev_nexus_artifact][0] or "" in [prev_nexus_artifact][0][0] {
              ruby {
                  path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                  script_params => { "fields" => "prev_nexus_artifact" }
              }
              mutate {
                merge => { "[nexus_artifact]" => "[prev_nexus_artifact]" }
              }
              mutate {
                remove_field => [ "[prev_nexus_artifact]" ]
              }
              ruby {
                  path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                  script_params => { fields => [ "nexus_artifact", "prev_buildUrl" ] }
              }
            }
  
            ruby {
              code => "
                unless event.get('[nexus_artifact]').nil?
                  event.set('[@metadata][query][nexus_artifact]',
                    [event.get('[nexus_artifact]')].flatten
                      .select{ |nexus_artifact| [34.chr, 27.chr, '\n', '\r', '\t'].none? { |char| nexus_artifact.include? char }}
                      .map { |nexus_artifact| 34.chr + nexus_artifact + 34.chr }
                      .take(1024)
                  )
                else
                  event.set('[@metadata][query][nexus_artifact]', [])
                end
              "
            }
  
            ## Добавляем ссылку на предыдущий билд с таким же nexus_artifact
            if ("" in [@metadata][query][nexus_artifact] or "" in [@metadata][query][nexus_artifact][0]) and ("" not in [prev_buildUrl] or "" not in [prev_buildUrl][0]) {
  
              if ("" in "/usr/share/logstash/misc/el_filter_tpl/jenkins-nexus-artifact-mapping.json" and "/usr/share/logstash/misc/el_filter_tpl/jenkins-nexus-artifact-mapping.json" != "") {
                opensearch {
                  id       => "10-jenkins-ci.conf_9_elasticsearch"
                  hosts    => [{{ opensearch_host_port }}]
                  ca_file  => "/usr/share/logstash/misc/ca.crt"
                  user     => "{{ opensearch_tech_user }}"
                  password => "{{ opensearch_tech_password }}"
                  index    => "<metrics-jenkins*-{now/M{YYYY.MM}}*>,<metrics-jenkins*-{now-1d/M{YYYY.MM}}*>"
                  query_template => "/usr/share/logstash/misc/el_filter_tpl/jenkins-nexus-artifact-mapping.json"
                  fields   => {
                    "buildUrl" => "prev_buildUrl"
                  }
                  enable_sort => false
                  result_size => 1000
                  ssl         => false
                }
  
                ruby {
                  id   => "10-jenkins-ci.conf_10_ruby"
                  path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                  script_params => {
                    "fields" => [
                      "prev_buildUrl"
                    ]
                  }
                }
              }
  
            }
          }
  
          if ("" in [nexus_artifact] or "" in [nexus_artifact][0]) {
  
            mutate {
              replace => {"[@metadata][query][result_size]" => 100}
            }
  
            ruby {
              code => "
                unless event.get('[nexus_artifact]').nil?
                  event.set('[@metadata][query][nexus_artifact]',
                    [event.get('[nexus_artifact]')].flatten
                      .select{ |nexus_artifact| [34.chr, 27.chr, '\n', '\r', '\t'].none? { |char| nexus_artifact.include? char }}
                      .map { |nexus_artifact| 34.chr + nexus_artifact + 34.chr }
                      .take(1024)
                  )
                else
                  event.set('[@metadata][query][nexus_artifact]', [])
                end
              "
            }
  
            if ("" in "/usr/share/logstash/misc/el_filter_tpl/nexus-artifact-mapping.json" and "/usr/share/logstash/misc/el_filter_tpl/nexus-artifact-mapping.json" != "") {
              opensearch {
                id       => "10-jenkins-ci.conf_11_elasticsearch"
                hosts    => [{{ opensearch_host_port }}]
                ca_file  => "/usr/share/logstash/misc/ca.crt"
                user     => "{{ opensearch_tech_user }}"
                password => "{{ opensearch_tech_password }}"
                index    => "metrics-mappings-nexus2squad"
                query_template => "/usr/share/logstash/misc/el_filter_tpl/nexus-artifact-mapping.json"
                fields   => {
                  "dit_cluster_code"       => "dit_cluster_code"
                  "tribe"                  => "tribe"
                  "dit_squad_code"         => "dit_squad_code"
                  "squad_type"             => "squad_type"
                  "org_unit1"              => "org_unit1"
                  "org_unit2"              => "org_unit2"
                  "org_unit3"              => "org_unit3"
                  "org_unit4"              => "org_unit4"
                  "product_code"           => "product_code"
                  "cluster_code"           => "cluster_code"
                  "system_code_sharepoint" => "system_code_sharepoint"
                  "dit_code"               => "dit_code"
                  "dit_cluster"            => "dit_cluster"
                  "program"                => "program"
                  "tribe_code"             => "tribe_code"
                  "competence"             => "competence"
                  "product"                => "product"
                  "chapter_code"           => "chapter_code"
                  "dit_squad"              => "dit_squad"
                  "competence_code"        => "competence_code"
                  "chapter"                => "chapter"
                  "squad"                  => "squad"
                  "cluster"                => "cluster"
                  "system_sharepoint"      => "system_sharepoint"
                  "dit_name"               => "dit_name"
                  "squad_code"             => "squad_code"
                  "kpi"                    => "kpi"
                }
                enable_sort => false
                result_size => 1000
                ssl         => false
              }
  
              ruby {
                id   => "10-jenkins-ci.conf_12_ruby"
                path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                script_params => {
                  "fields" => [
                    "dit_cluster_code",
                    "tribe",
                    "dit_squad_code",
                    "squad_type",
                    "org_unit1",
                    "org_unit2",
                    "org_unit3",
                    "org_unit4",
                    "product_code",
                    "cluster_code",
                    "system_code_sharepoint",
                    "dit_code",
                    "dit_cluster",
                    "program",
                    "tribe_code",
                    "competence",
                    "product",
                    "chapter_code",
                    "dit_squad",
                    "competence_code",
                    "chapter",
                    "squad",
                    "cluster",
                    "system_sharepoint",
                    "dit_name",
                    "squad_code",
                    "kpi"
                  ]
                }
              }
            }
  
          }
  
          grok {
            id    => "10-jenkins-ci.conf_13_grok"
            match => { "[nexus_artifact_upload]" => "(?<upload_conf_item_nexus_artifact_upload>CI[0-9]{8,})" }
          }
          if "" in [upload_conf_item_nexus_artifact_upload] or "" in [upload_conf_item_nexus_artifact_upload][0] {
            if "" in [upload_conf_item] or "" in [upload_conf_item][0] {
              mutate {
                id    => "10-jenkins-ci.conf_14_mutate"
                merge => { "[upload_conf_item]" => "[upload_conf_item_nexus_artifact_upload]" }
              }
              mutate {
                id           => "10-jenkins-ci.conf_15_mutate"
                remove_field => [ "[upload_conf_item_nexus_artifact_upload]" ]
              }
            } else {
              mutate {
                id     => "10-jenkins-ci.conf_16_mutate"
                rename => { "upload_conf_item_nexus_artifact_upload" => "upload_conf_item" }
              }
            }
          }
  
  
          grok {
            id    => "10-jenkins-ci.conf_17_grok"
            match => { "[nexus_artifact]" => "(?<conf_item_nexus_artifact>CI[0-9]{8,})" }
          }
          if "" in [conf_item_nexus_artifact] or "" in [conf_item_nexus_artifact][0] {
            if "" in [conf_item] or "" in [conf_item][0] {
              mutate {
                id    => "10-jenkins-ci.conf_18_mutate"
                merge => { "[conf_item]" => "[conf_item_nexus_artifact]" }
              }
              mutate {
                id           => "10-jenkins-ci.conf_19_mutate"
                remove_field => [ "[conf_item_nexus_artifact]" ]
              }
            } else {
              mutate {
                id     => "10-jenkins-ci.conf_20_mutate"
                rename => { "conf_item_nexus_artifact" => "conf_item" }
              }
            }
          }
          grok {
            id    => "10-jenkins-ci.conf_21_grok"
            match => { "[nexus_artifact_upload]" => "(?<conf_item_nexus_artifact_upload>CI[0-9]{8,})" }
          }
          if "" in [conf_item_nexus_artifact_upload] or "" in [conf_item_nexus_artifact_upload][0] {
            if "" in [conf_item] or "" in [conf_item][0] {
              mutate {
                id    => "10-jenkins-ci.conf_22_mutate"
                merge => { "[conf_item]" => "[conf_item_nexus_artifact_upload]" }
              }
              mutate {
                id           => "10-jenkins-ci.conf_23_mutate"
                remove_field => [ "[conf_item_nexus_artifact_upload]" ]
              }
            } else {
              mutate {
                id     => "10-jenkins-ci.conf_24_mutate"
                rename => { "conf_item_nexus_artifact_upload" => "conf_item" }
              }
            }
          }
  
          if "" in [conf_item] or "" in [conf_item][0] {
            esquerystring {
              id     => "10-jenkins-ci.conf_25_esquerystring"
              source => "[conf_item]"
              target => "[@metadata][search][conf_item]"
            }
            if ("" in [@metadata][search][conf_item] and [@metadata][search][conf_item] != "") {
              opensearch {
                id       => "10-jenkins-ci.conf_26_elasticsearch"
                hosts    => [{{ opensearch_host_port }}]
                ca_file  => "/usr/share/logstash/misc/ca.crt"
                user     => "{{ opensearch_tech_user }}"
                password => "{{ opensearch_tech_password }}"
                index    => "metrics-mappings-sm_ci"
                query    => "_id:%{[@metadata][search][conf_item]}"
                fields   => {
                  "system_hpsm" => "system_hpsm"
                }
                enable_sort => false
                result_size => 1000
                ssl         => false
              }
  
              ruby {
                id   => "10-jenkins-ci.conf_27_ruby"
                path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                script_params => {
                  "fields" => [
                    "system_hpsm"
                  ]
                }
              }
            }
          }
  
          grok {
            id    => "10-jenkins-ci.conf_28_grok"
            match => { "[nexus_artifact]" => "(?<nexus_artifact_conf_item_nexus_artifact>CI[0-9]{8,})" }
          }
          if "" in [nexus_artifact_conf_item_nexus_artifact] or "" in [nexus_artifact_conf_item_nexus_artifact][0] {
            if "" in [nexus_artifact_conf_item] or "" in [nexus_artifact_conf_item][0] {
              mutate {
                id    => "10-jenkins-ci.conf_29_mutate"
                merge => { "[nexus_artifact_conf_item]" => "[nexus_artifact_conf_item_nexus_artifact]" }
              }
              mutate {
                id           => "10-jenkins-ci.conf_30_mutate"
                remove_field => [ "[nexus_artifact_conf_item_nexus_artifact]" ]
              }
            } else {
              mutate {
                id     => "10-jenkins-ci.conf_31_mutate"
                rename => { "nexus_artifact_conf_item_nexus_artifact" => "nexus_artifact_conf_item" }
              }
            }
          }
  
          if "" in [nexus_artifact_conf_item] or "" in [nexus_artifact_conf_item][0] {
            esquerystring {
              id     => "10-jenkins-ci.conf_32_esquerystring"
              source => "[nexus_artifact_conf_item]"
              target => "[@metadata][search][conf_item]"
            }
            if ("" in [@metadata][search][conf_item] and [@metadata][search][conf_item] != "") {
              opensearch {
                id       => "10-jenkins-ci.conf_33_elasticsearch"
                hosts    => [{{ opensearch_host_port }}]
                ca_file  => "/usr/share/logstash/misc/ca.crt"
                user     => "{{ opensearch_tech_user }}"
                password => "{{ opensearch_tech_password }}"
                index    => "metrics-mappings-sm_ci"
                query    => "_id:%{[@metadata][search][conf_item]}"
                fields   => {
                  "system_hpsm" => "nexus_artifact_system_hpsm"
                }
                enable_sort => false
                result_size => 1000
                ssl         => false
              }
  
              ruby {
                id   => "10-jenkins-ci.conf_34_ruby"
                path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                script_params => {
                  "fields" => [
                    "nexus_artifact_system_hpsm"
                  ]
                }
              }
            }
          }
  
          grok {
            id    => "10-jenkins-ci.conf_35_grok"
            match => { "[jobDescription]" => "(?<job_conf_item_jobDescription>CI[0-9]{8,})" }
          }
          if "" in [job_conf_item_jobDescription] or "" in [job_conf_item_jobDescription][0] {
            if "" in [job_conf_item] or "" in [job_conf_item][0] {
              mutate {
                id    => "10-jenkins-ci.conf_36_mutate"
                merge => { "[job_conf_item]" => "[job_conf_item_jobDescription]" }
              }
              mutate {
                id           => "10-jenkins-ci.conf_37_mutate"
                remove_field => [ "[job_conf_item_jobDescription]" ]
              }
            } else {
              mutate {
                id     => "10-jenkins-ci.conf_38_mutate"
                rename => { "job_conf_item_jobDescription" => "job_conf_item" }
              }
            }
          }
          grok {
            id    => "10-jenkins-ci.conf_39_grok"
            match => { "[fullJobName]" => "(?<job_conf_item_fullJobName>CI[0-9]{8,})" }
          }
          if "" in [job_conf_item_fullJobName] or "" in [job_conf_item_fullJobName][0] {
            if "" in [job_conf_item] or "" in [job_conf_item][0] {
              mutate {
                id    => "10-jenkins-ci.conf_40_mutate"
                merge => { "[job_conf_item]" => "[job_conf_item_fullJobName]" }
              }
              mutate {
                id           => "10-jenkins-ci.conf_41_mutate"
                remove_field => [ "[job_conf_item_fullJobName]" ]
              }
            } else {
              mutate {
                id     => "10-jenkins-ci.conf_42_mutate"
                rename => { "job_conf_item_fullJobName" => "job_conf_item" }
              }
            }
          }
  
          if "" in [job_conf_item] or "" in [job_conf_item][0] {
            esquerystring {
              id     => "10-jenkins-ci.conf_43_esquerystring"
              source => "[job_conf_item]"
              target => "[@metadata][search][conf_item]"
            }
            if ("" in [@metadata][search][conf_item] and [@metadata][search][conf_item] != "") {
              opensearch {
                id       => "10-jenkins-ci.conf_44_elasticsearch"
                hosts    => [{{ opensearch_host_port }}]
                ca_file  => "/usr/share/logstash/misc/ca.crt"
                user     => "{{ opensearch_tech_user }}"
                password => "{{ opensearch_tech_password }}"
                index    => "metrics-mappings-sm_ci"
                query    => "_id:%{[@metadata][search][conf_item]}"
                fields   => {
                  "system_hpsm" => "job_system_hpsm"
                }
                enable_sort => false
                result_size => 1000
                ssl         => false
              }
  
              ruby {
                id   => "10-jenkins-ci.conf_45_ruby"
                path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                script_params => {
                  "fields" => [
                    "job_system_hpsm"
                  ]
                }
              }
            }
          }
  
          esquerystring {
            source => "[nexus_artifact_conf_item]"
            target => "[@metadata][search][conf_item]"
          }
          if ("" in [@metadata][search][conf_item] and [@metadata][search][conf_item] != "") {
            opensearch {
              id       => "10-jenkins-ci.conf_46_elasticsearch"
              hosts    => [{{ opensearch_host_port }}]
              ca_file  => "/usr/share/logstash/misc/ca.crt"
              user     => "{{ opensearch_tech_user }}"
              password => "{{ opensearch_tech_password }}"
              index    => "metrics-mappings-as2tribe"
              query    => "conf_item.keyword:%{[@metadata][search][conf_item]}"
              fields   => {
                "squad_code"   => "nexus_artifact_squad_code"
                "system_tribe" => "nexus_artifact_tribe"
                "squad"        => "nexus_artifact_squad"
                "system"       => "system"
              }
              enable_sort => false
              result_size => 1000
              ssl         => false
            }
  
            ruby {
              id   => "10-jenkins-ci.conf_47_ruby"
              path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
              script_params => {
                "fields" => [
                  "nexus_artifact_squad_code",
                  "nexus_artifact_tribe",
                  "nexus_artifact_squad",
                  "system"
                ]
              }
            }
          }
  
          if "" not in [system_sharepoint] and "" not in [system_sharepoint][0] and ("" in [conf_item] or "" in [conf_item][0]) {
            esquerystring {
              id     => "10-jenkins-ci.conf_48_esquerystring"
              source => "[conf_item]"
              target => "[@metadata][system_sharepoint][conf_item]"
            }
            if ("" in [@metadata][system_sharepoint][conf_item] and [@metadata][system_sharepoint][conf_item] != "") {
              opensearch {
                id       => "10-jenkins-ci.conf_49_elasticsearch"
                hosts    => [{{ opensearch_host_port }}]
                ca_file  => "/usr/share/logstash/misc/ca.crt"
                user     => "{{ opensearch_tech_user }}"
                password => "{{ opensearch_tech_password }}"
                index    => "metrics-mappings-sharepoint-repo2system"
                query    => "conf_item:%{[@metadata][system_sharepoint][conf_item]}"
                fields   => {
                  "system_sharepoint"      => "system_sharepoint"
                  "system_code_sharepoint" => "system_code_sharepoint"
                }
                enable_sort => false
                result_size => 1000
                ssl         => false
              }
  
              ruby {
                id   => "10-jenkins-ci.conf_50_ruby"
                path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                script_params => {
                  "fields" => [
                    "system_sharepoint",
                    "system_code_sharepoint"
                  ]
                }
              }
            }
          }
          if "" not in [system_tribe] and "" not in [system_tribe][0] and ("" in [conf_item] or "" in [conf_item][0]) {
            esquerystring {
              id     => "10-jenkins-ci.conf_51_esquerystring"
              source => "[conf_item]"
              target => "[@metadata][system_tribe][conf_item]"
            }
            if ("" in [@metadata][system_tribe][conf_item] and [@metadata][system_tribe][conf_item] != "") {
              opensearch {
                id       => "10-jenkins-ci.conf_52_elasticsearch"
                hosts    => [{{ opensearch_host_port }}]
                ca_file  => "/usr/share/logstash/misc/ca.crt"
                user     => "{{ opensearch_tech_user }}"
                password => "{{ opensearch_tech_password }}"
                index    => "metrics-mappings-as2tribe"
                query    => "conf_item:%{[@metadata][system_tribe][conf_item]}"
                fields   => {
                  "service"            => "service"
                  "system_tribe"       => "system_tribe"
                  "system"             => "system"
                  "service_tribe_code" => "service_tribe_code"
                  "system_tribe_code"  => "system_tribe_code"
                  "service_tribe"      => "service_tribe"
                }
                enable_sort => false
                result_size => 1000
                ssl         => false
              }
  
              ruby {
                id   => "10-jenkins-ci.conf_53_ruby"
                path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                script_params => {
                  "fields" => [
                    "service",
                    "system_tribe",
                    "system",
                    "service_tribe_code",
                    "system_tribe_code",
                    "service_tribe"
                  ]
                }
              }
            }
          }
  
          ruby {
            id   => "10-jenkins-ci.conf_54_ruby"
            code => "
              files = event.get('file_upload')
              unless files.is_a?(Array)
                files = [files]
              end
              files.each { |file|
                if file =~ /-(\w{2,})(-|_)(ok|fail|err|temp)(.html|.flag)/
                  if $3 == 'err'
                    event.set($1 + '_fail', event.get('@timestamp'))
                  else
                    event.set($1 + '_' + $3, event.get('@timestamp'))
                  end
                end
              }
            "
          }
  
          ## Обновляем привязку команд в индексах nexus-* и nexus2squad
          if ("" in [nexus_artifact_upload] or "" in [nexus_artifact_upload][0]) and ("" in [squad] or "" in [squad][0] or "" in [org_unit1] or "" in [org_unit1][0] or "" in [system_sharepoint] or "" in [system_sharepoint][0] or "" in [system_hpsm] or "" in [system_hpsm][0]) {
  
            clone {
              clones => ["nexus-update", "nexus2squad"]
            }
  
            if [type] in ["nexus-update", "nexus2squad"] {
              split {
                field => "nexus_artifact_upload"
              }
  
              prune {
                whitelist_names => [
                  "^logstash",
                  "^type$",
                  "^@timestamp$",
                  "^tags$",
                  "^host$",
                  "^segment$",
                  "^chapter",
                  "^competence",
                  "^cluster",
                  "^conf_item$",
                  "^kpi$",
                  "^org_unit[1-4]$",
                  "^product",
                  "^program$",
                  "^squad",
                  "^system_code_sharepoint$",
                  "^system_hpsm$",
                  "^system_sharepoint$",
                  "^tribe",
                  "^nexus_artifact_upload$",
                  "^dit_squad$",
                  "^dit_squad_code$",
                  "^dit_name$",
                  "^dit_code$",
                  "^dit_cluster$",
                  "^dit_cluster_code$"
                ]
              }
  
              if [type] == "nexus-update" {
                mutate {
                  replace => {
                    "[type]"                           => "nexus"
                    "[@metadata][output][document_id]" => "%{nexus_artifact_upload}"
                  }
                  add_tag => ['custom-output', 'jenkins-ci', 'nexus-update']
                }
              } else {
                mutate {
                  replace => {
                    "[@metadata][output][document_id]" => "%{nexus_artifact_upload}"
                    "[@metadata][output][index]"       => "metrics-mappings-nexus2squad"
                  }
                  add_tag => ['jenkins-ci']
                }
              }
  
              mutate {
                remove_field => [ "nexus_artifact_upload" ]
                add_field => {"[@metadata][special]" => "_squad-update"}
                add_tag => ["nexus-squad-update"]
              }
            }
          }
  
          ## Обновляем привязку команд в индексах sonar-webhook
          if ("" in [sonar_task_id] or "" in [sonar_task_id][0]) and ("" in [squad] or "" in [squad][0] or "" in [org_unit1] or "" in [org_unit1][0] or "" in [system_sharepoint] or "" in [system_sharepoint][0] or "" in [system_hpsm] or "" in [system_hpsm][0]) {
  
            clone {
              clones => ["sonar-update"]
            }
  
            if [type] == "sonar-update" {
  
              split {
                field => "sonar_task_id"
              }
  
              mutate {
                replace => {
                  "[type]"                           => "sonar-webhook"
                  "[@metadata][output][document_id]" => "%{sonar_task_id}"
                }
                add_tag => ['custom-output', 'jenkins-ci', 'sonar-squad-update']
              }
  
              prune {
                whitelist_names => [
                  "^logstash",
                  "^type$",
                  "^@timestamp$",
                  "^tags$",
                  "^host$",
                  "^segment$",
                  "^chapter",
                  "^cluster",
                  "^competence",
                  "^conf_item$",
                  "^kpi$",
                  "^org_unit[1-4]$",
                  "^product",
                  "^program$",
                  "^squad",
                  "^system_code_sharepoint$",
                  "^system_hpsm$",
                  "^system_sharepoint$",
                  "^tribe",
                  "^dit_squad$",
                  "^dit_squad_code$",
                  "^dit_name$",
                  "^dit_code$",
                  "^dit_cluster$",
                  "^dit_cluster_code$"
                ]
              }
            }
          }
        }
      }
  
    }
  }