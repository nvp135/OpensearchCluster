filter {
  if ([type] == "pipeline-dpm" and "sync-mq" not in [tags]) {

    if ("" in [as_key]) {
      mutate {
        add_field => {"[@metadata][search][jira_project_key]" => "%{as_key}"}
      }
      mutate {
        uppercase => ["[@metadata][search][jira_project_key]"]
      }
      if ("" in [@metadata][search][jira_project_key] and [@metadata][search][jira_project_key] != "") {
      opensearch {
        id       => "10-dpm.conf_0_elasticsearch"
        hosts    => [{{ opensearch_host_port }}]
        ca_file  => "/usr/share/logstash/misc/ca.crt"
        user     => "{{ opensearch_tech_user }}"
        password => "{{ opensearch_tech_password }}"
        index    => "metrics-mappings-sbergilestruct"
        query    => "jira.project.key.keyword:%{[@metadata][search][jira_project_key]}"
        fields   => {
          "tribe"      => "tribe"
          "squad_info" => "squad_info"
          "squad_type" => "squad_type"
          "squad"      => "squad"
          "squad_code" => "squad_code"
          "tribe_code" => "tribe_code"
        }
        enable_sort => false
        result_size => 1000
      }

      ruby {
        id   => "10-dpm.conf_1_ruby"
        path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
        script_params => {
          "fields" => [
            "tribe",
            "squad_info",
            "squad_type",
            "squad",
            "squad_code",
            "tribe_code"
          ]
        }
      }
    }
    }

    mutate {
      add_field => [ "@receive_timestamp", "%{@timestamp}" ]
    }
    date {
      match => ["@receive_timestamp", "ISO8601"]
      target => "@receive_timestamp"
    }
    if "_dateparsefailure" in [tags] {
      mutate {
        remove_field => [ "@receive_timestamp" ]
        remove_tag => [ "_dateparsefailure" ]
      }
    }

    mutate {
      replace => {
        "[@metadata][output][index]" => "metrics-%{type}-%{+YYYY}"
      }
    }

    if [reason] in ['START_JOB', 'END_JOB'] {
      mutate {
        replace => {
          "[@metadata][output][document_id]" => "%{ciUrl}_%{buildUrl}__%{event_end_time}"
        }
      }
    } else {
      mutate {
        replace => {
          "[@metadata][output][document_id]" => "%{groupId}_%{artifactId}_%{version}_%{event_fired_at}"
        }
      }
    }

    fingerprint {
      key => "mazafuckaaa"
      source => "[@metadata][output][document_id]"
      target => "[@metadata][output][document_id]"
    }
    if "" in [event_fired_at] and [event_fired_at] != "" {
      date {
        match => [ "event_fired_at", "ISO8601" ]
        target => "event_fired_at"
      }
      if "_dateparsefailure" in [tags] {
        mutate {
          remove_field => [ "event_fired_at" ]
          remove_tag => [ "_dateparsefailure" ]
        }
      }
    }
    if "" in [jobEndTime] and [jobEndTime] != "" {
      date {
        match => [ "jobEndTime", "ISO8601" ]
        target => "jobEndTime"
      }
      if "_dateparsefailure" in [tags] {
        mutate {
          remove_field => [ "jobEndTime" ]
          remove_tag => [ "_dateparsefailure" ]
        }
      }
    }
    if "" in [jobStartTime] and [jobStartTime] != "" {
      date {
        match => [ "jobStartTime", "ISO8601" ]
        target => "jobStartTime"
      }
      if "_dateparsefailure" in [tags] {
        mutate {
          remove_field => [ "jobStartTime" ]
          remove_tag => [ "_dateparsefailure" ]
        }
      }
    }
    if "" in [event_start_time] and [event_start_time] != "" {
      date {
        match => [ "event_start_time", "ISO8601" ]
        target => "event_start_time"
      }
      if "_dateparsefailure" in [tags] {
        mutate {
          remove_field => [ "event_start_time" ]
          remove_tag => [ "_dateparsefailure" ]
        }
      }
    }
    if "" in [event_end_time] and [event_end_time] != "" {
      date {
        match => [ "event_end_time", "ISO8601" ]
        target => "event_end_time"
      }
      if "_dateparsefailure" in [tags] {
        mutate {
          remove_field => [ "event_end_time" ]
          remove_tag => [ "_dateparsefailure" ]
        }
      } else {
        mutate {
          remove_field => [ "@timestamp" ]
          add_field => { "[@metadata][timestamp]" => "%{event_end_time}" }
        }
        date {
          match => [ "[@metadata][timestamp]", "ISO8601" ]
          target => "@timestamp"
        }
      }
    }

    mutate {
      convert => {
        "dpm_event_type"         => "string"
        "source"                 => "string"
        "issue_key"              => "string"
        "repository"             => "string"
        "groupId"                => "string"
        "artifactId"             => "string"
        "version"                => "string"
        "stand"                  => "string"
        "start_type"             => "string"
        "result"                 => "string"
        "dpm_result"             => "string"
        "ciUrl"                  => "string"
        "buildUrl"               => "string"
        "stageName"              => "string"
        "phase_name"             => "string"
        "as_key"                 => "string"
        "as_name"                => "string"
        "fss_key"                => "string"
        "fss_name"               => "string"
        "nexusBaseUrl"           => "string"
        "pipelineName"           => "string"
        "pipelineTargetEntity"   => "string"
        "pipelineType"           => "string"
        "rao_key"                => "string"
        "rao_name"               => "string"
        "reason"                 => "string"
        "step"                   => "string"
        "[userInfo][email]"      => "string"
        "[userInfo][login]"      => "string"
        "[userInfo][name]"       => "string"
        "[userInfo][userId]"     => "string"
        "phaseType"              => "string"
        "phase_key"              => "string"
        "secretBuildVars"        => "string"

        "isStepOptional"         => "boolean"
        "job_have_params"        => "boolean"
        "isOptional"             => "boolean"

        "phase_duration_millis"  => "integer"
        "jobDuration"            => "integer"

        "phaseId"                => "integer"
        "pipelineId"             => "integer"
        "rcId"                   => "integer"
      }
    }

    if "" in [pipelineVars] {
      json {
        source => "pipelineVars"
        target => "pipelineVars"
      }
    }
    if "" in [buildVars] {
      json {
        source => "buildVars"
        target => "buildVars"
      }
    }

    if "" in [repository] and "" in [groupId] and "" in [artifactId] and "" in [version] {
      mutate {
        add_field => {
          "src_nexus_artifact" => "%{repository}:%{groupId}/%{artifactId}/%{version}"
        }
      }
    }

    ## Приведение ссылок к виду, как в дженкинках (слеши не там)
    if "" in [ciUrl] {
      mutate {
        replace => {
          "ciUrl" => "%{ciUrl}/"
        }
      }
    }

    if "" in [buildUrl] {
      mutate {
        gsub => [
          "buildUrl", "^/", ""
        ]
        replace => {
          "buildUrl" => "%{buildUrl}/"
        }
      }
    }

    ## Получение nexus_artifact из jenkins*
    if "" in [buildUrl] and "" in [ciUrl] and [dpm_result] != "READY_FOR_RUN" {

      esquerystring {
        source => "[buildUrl]"
        target => "[@metadata][search][buildUrl]"
      }

      esquerystring {
        source => "[ciUrl]"
        target => "[@metadata][search][ciUrl]"
      }

      mutate {
        add_field => {
          "[@metadata][search][nexus_artifact_query]" => "ciUrl.keyword:%{[@metadata][search][ciUrl]} AND buildUrl.keyword:%{[@metadata][search][buildUrl]} AND eventType.keyword:build AND NOT result.keyword:INPROGRESS AND _exists_:nexus_artifact"
        }
      }
      if ("" in [@metadata][search][nexus_artifact_query] and [@metadata][search][nexus_artifact_query] != "") {
      opensearch {
        id       => "10-dpm.conf_2_elasticsearch"
        hosts    => [{{ opensearch_host_port }}]
        ca_file  => "/usr/share/logstash/misc/ca.crt"
        user     => "{{ opensearch_tech_user }}"
        password => "{{ opensearch_tech_password }}"
        index    => "<metrics-jenkins*-{now/M{YYYY.MM}}*>,<metrics-jenkins*-{now-1d/M{YYYY.MM}}*>"
        query    => "%{[@metadata][search][nexus_artifact_query]}"
        fields   => {
          "nexus_artifact" => "nexus_artifact"
        }
        enable_sort => true
        sort        => "@timestamp:desc"
        result_size => 1000
      }

      ruby {
        id   => "10-dpm.conf_3_ruby"
        path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
        script_params => {
          "fields" => [
            "nexus_artifact"
          ]
        }
      }
    }
    }

    ## Если ничего не замаппилось из дженкинса, а из эвента прилетело, то возвращаем это значение и ищем по нему КЭ и маппим АС, трайб и т.д.
    if "" not in [nexus_artifact] and "" not in [nexus_artifact][0] and "" in [src_nexus_artifact] {
      mutate {
        rename => {
          "src_nexus_artifact" => "nexus_artifact"
        }
      }
    }

    if "" in [nexus_artifact] or "" in [nexus_artifact][0] {
      grok {
        id    => "10-dpm.conf_4_grok"
        match => { "[nexus_artifact]" => "(?<conf_item_nexus_artifact>CI[0-9]{8,})" }
      }
      if "" in [conf_item_nexus_artifact] or "" in [conf_item_nexus_artifact][0] {
        if "" in [conf_item] or "" in [conf_item][0] {
          mutate {
            id    => "10-dpm.conf_5_mutate"
            merge => { "[conf_item]" => "[conf_item_nexus_artifact]" }
          }
          mutate {
            id           => "10-dpm.conf_6_mutate"
            remove_field => [ "[conf_item_nexus_artifact]" ]
          }
        } else {
          mutate {
            id     => "10-dpm.conf_7_mutate"
            rename => { "conf_item_nexus_artifact" => "conf_item" }
          }
        }
      }

      if "" in [conf_item] or "" in [conf_item][0] {
        esquerystring {
          id     => "10-dpm.conf_8_esquerystring"
          source => "[conf_item]"
          target => "[@metadata][search][conf_item]"
        }
        if ("" in [@metadata][search][conf_item] and [@metadata][search][conf_item] != "") {
          opensearch {
            id       => "10-dpm.conf_9_elasticsearch"
            hosts    => [{{ opensearch_host_port }}]
            ca_file  => "/usr/share/logstash/misc/ca.crt"
            user     => "{{ opensearch_tech_user }}"
            password => "{{ opensearch_tech_password }}"
            index    => "metrics-mappings-sm_ci"
            query    => "_id:%{[@metadata][search][conf_item]}"
            fields   => {
              "system_hpsm" => "system_hpsm"
            }
            enable_sort => false
            result_size => 1000
          }

          ruby {
            id   => "10-dpm.conf_10_ruby"
            path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
            script_params => {
              "fields" => [
                "system_hpsm"
              ]
            }
          }
        }
      }
      # AS-Service Tribe mapping
      if "" in [conf_item]  or "" in [conf_item][0] {
        esquerystring {
          source => "[conf_item]"
          target => "[@metadata][search][conf_item]"
        }
        mutate {
          add_field => {
            "[@metadata][search][query_system]" => "conf_item:%{[@metadata][search][conf_item]}"
          }
          copy => {
            "conf_item" => "service_conf_item"
          }
        }
        if ("" in [@metadata][search][query_system] and [@metadata][search][query_system] != "") {
                opensearch {
                  id       => "10-dpm.conf_11_elasticsearch"
                  hosts    => [{{ opensearch_host_port }}]
                  ca_file  => "/usr/share/logstash/misc/ca.crt"
                  user     => "{{ opensearch_tech_user }}"
                  password => "{{ opensearch_tech_password }}"
                  index    => "metrics-mappings-as2tribe"
                  query    => "%{[@metadata][search][query_system]}"
                  fields   => {
                    "service"            => "service"
                    "system_dit"         => "system_dit"
                    "system_tribe"       => "system_tribe"
                    "system"             => "system"
                    "service_tribe_code" => "service_tribe_code"
                    "system_tribe_code"  => "system_tribe_code"
                    "service_dit"        => "service_dit"
                    "service_tribe"      => "service_tribe"
                  }
                  enable_sort => false
                  result_size => 1000
                }

                ruby {
                  id   => "10-dpm.conf_12_ruby"
                  path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
                  script_params => {
                    "fields" => [
                      "service",
                      "system_dit",
                      "system_tribe",
                      "system",
                      "service_tribe_code",
                      "system_tribe_code",
                      "service_dit",
                      "service_tribe"
                    ]
                  }
                }
              }
        if "" not in [service] and "" not in [service][0] {
          mutate {
            remove_field => ["service_conf_item"]
          }
        }
      }
    }

    if "" in [issue_key] or "" in [issue_key][0] {
      ruby {
        code => "
          unless event.get('[issue_key]').nil?
            event.set('[@metadata][query][issue_key]',
              [event.get('[issue_key]')].flatten
                .select{ |issue_key| [34.chr, 27.chr, '\n', '\r', '\t'].none? { |char| issue_key.include? char }}
                .map { |issue_key| 34.chr + issue_key + 34.chr }
            )
          else
            event.set('[@metadata][query][issue_key]', [])
          end
        "
      }

      if "" in [@metadata][query][issue_key][0] {
        if ("" in "/usr/share/logstash/misc/el_filter_tpl/issue-key-squad-mapping.json" and "/usr/share/logstash/misc/el_filter_tpl/issue-key-squad-mapping.json" != "") {
          opensearch {
            id       => "10-dpm.conf_13_elasticsearch"
            hosts    => [{{ opensearch_host_port }}]
            ca_file  => "/usr/share/logstash/misc/ca.crt"
            user     => "{{ opensearch_tech_user }}"
            password => "{{ opensearch_tech_password }}"
            index    => "metrics-jira-actual"
            query_template => "/usr/share/logstash/misc/el_filter_tpl/issue-key-squad-mapping.json"
            fields   => {
              "squad_code" => "squad_code"
              "tribe"      => "tribe"
              "tribe_code" => "tribe_code"
              "squad"      => "squad"
            }
            enable_sort => false
            result_size => 1000
          }

          ruby {
            id   => "10-dpm.conf_14_ruby"
            path => "/usr/share/logstash/ruby-scripts/simplify-array.rb"
            script_params => {
              "fields" => [
                "squad_code",
                "tribe",
                "tribe_code",
                "squad"
              ]
            }
          }
        }
      }
    }

    prune {
      whitelist_names => [
        "^logstash",
        "^type$",
        "^@receive_timestamp$",
        "^@timestamp$",
        "^tags$",
        "^host$",
        "^segment$",
        "^job_have_params$",
        "^phase_duration_millis$",
        "^event_start_time$",
        "^event_end_time$",
        "^dpm_event_type$",
        "^source$",
        "^issue_key$",
        "^repository$",
        "^groupId$",
        "^artifactId$",
        "^version$",
        "^stand$",
        "^start_type$",
        "^result$",
        "^dpm_result$",
        "^ciUrl$",
        "^buildUrl$",
        "^stageName$",
        "^phase_name$",
        "^nexus_artifact$",
        "^src_nexus_artifact$",
        "^conf_item$",
        "^service_conf_item$",
        "^system$",
        "^system_tribe$",
        "^system_tribe_code$",
        "^system_dit$",
        "^service$",
        "^service_tribe$",
        "^service_tribe_code$",
        "^service_dit$",
        "^squad$",
        "^squad_code$",
        "^squad_query$",
        "^tribe$",
        "^tribe_code$",
        "^jobDuration$",
        "^as_key$",
        "^as_name$",
        "^fss_key$",
        "^fss_name$",
        "^nexusBaseUrl$",
        "^pipelineName$",
        "^pipelineTargetEntity$",
        "^pipelineType$",
        "^rao_key$",
        "^rao_name$",
        "^reason$",
        "^step$",
        "^phaseType$",
        "^phase_key$",
        "^secretBuildVars$",
        "^userInfo$",
        "^isStepOptional$",
        "^job_have_params$",
        "^isOptional$",
        "^phaseId$",
        "^pipelineId$",
        "^rcId$",
        "^pipelineVars$",
        "^buildVars$"
      ]
    }
  }
}
